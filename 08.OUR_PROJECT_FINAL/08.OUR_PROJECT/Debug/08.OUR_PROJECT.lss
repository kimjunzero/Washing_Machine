
08.OUR_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  0000192c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000272  0080026a  0080026a  00001b2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db0  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001082  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f63  00000000  00000000  00004b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00005b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fd  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d34  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000075ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c7       	rjmp	.+3634   	; 0xe48 <__vector_5>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a8 c2       	rjmp	.+1360   	; 0x582 <__vector_12>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bb c1       	rjmp	.+886    	; 0x3b8 <__vector_16>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c5       	rjmp	.+2848   	; 0xb6a <__vector_18>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 01       	movw	r0, r10
      8e:	18 01       	movw	r2, r16
      90:	31 01       	movw	r6, r2
      92:	4a 01       	movw	r8, r20
      94:	63 01       	movw	r12, r6
      96:	7b 01       	movw	r14, r22
      98:	93 01       	movw	r18, r6
      9a:	ab 01       	movw	r20, r22

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e1       	ldi	r29, 0x10	; 16
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	12 e0       	ldi	r17, 0x02	; 2
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	ec e2       	ldi	r30, 0x2C	; 44
      b0:	f9 e1       	ldi	r31, 0x19	; 25
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	aa 36       	cpi	r26, 0x6A	; 106
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	24 e0       	ldi	r18, 0x04	; 4
      c4:	aa e6       	ldi	r26, 0x6A	; 106
      c6:	b2 e0       	ldi	r27, 0x02	; 2
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	ac 3d       	cpi	r26, 0xDC	; 220
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	b7 d2       	rcall	.+1390   	; 0x642 <main>
      d4:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <init_button>:
void init_button(void);
int get_button(int button_num, int button_pin);
                                                
void init_button(void)
{
	BUTTON_DDR &= ~( 1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      da:	81 b3       	in	r24, 0x11	; 17
      dc:	8f 70       	andi	r24, 0x0F	; 15
      de:	81 bb       	out	0x11, r24	; 17
      e0:	08 95       	ret

000000e2 <get_button>:
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};	
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
      e2:	20 b3       	in	r18, 0x10	; 16
      e4:	42 2f       	mov	r20, r18
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <get_button+0x10>
      ee:	22 0f       	add	r18, r18
      f0:	33 1f       	adc	r19, r19
      f2:	6a 95       	dec	r22
      f4:	e2 f7       	brpl	.-8      	; 0xee <get_button+0xc>
      f6:	24 23       	and	r18, r20
      f8:	35 23       	and	r19, r21
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
      fa:	21 15       	cp	r18, r1
      fc:	31 05       	cpc	r19, r1
      fe:	b9 f0       	breq	.+46     	; 0x12e <get_button+0x4c>
     100:	fc 01       	movw	r30, r24
     102:	e6 59       	subi	r30, 0x96	; 150
     104:	fd 4f       	sbci	r31, 0xFD	; 253
     106:	40 81       	ld	r20, Z
     108:	41 11       	cpse	r20, r1
     10a:	11 c0       	rjmp	.+34     	; 0x12e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10c:	2f ef       	ldi	r18, 0xFF	; 255
     10e:	3d ee       	ldi	r19, 0xED	; 237
     110:	42 e0       	ldi	r20, 0x02	; 2
     112:	21 50       	subi	r18, 0x01	; 1
     114:	30 40       	sbci	r19, 0x00	; 0
     116:	40 40       	sbci	r20, 0x00	; 0
     118:	e1 f7       	brne	.-8      	; 0x112 <get_button+0x30>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <get_button+0x3a>
     11c:	00 00       	nop
	{
		_delay_ms(60);   // noise가 지나가기를 기다린다. 
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
     11e:	fc 01       	movw	r30, r24
     120:	e6 59       	subi	r30, 0x96	; 150
     122:	fd 4f       	sbci	r31, 0xFD	; 253
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	20 83       	st	Z, r18
		return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	08 95       	ret
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
     12e:	23 2b       	or	r18, r19
     130:	b1 f4       	brne	.+44     	; 0x15e <get_button+0x7c>
     132:	fc 01       	movw	r30, r24
     134:	e6 59       	subi	r30, 0x96	; 150
     136:	fd 4f       	sbci	r31, 0xFD	; 253
     138:	20 81       	ld	r18, Z
     13a:	21 30       	cpi	r18, 0x01	; 1
     13c:	99 f4       	brne	.+38     	; 0x164 <get_button+0x82>
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	3d ee       	ldi	r19, 0xED	; 237
     142:	42 e0       	ldi	r20, 0x02	; 2
     144:	21 50       	subi	r18, 0x01	; 1
     146:	30 40       	sbci	r19, 0x00	; 0
     148:	40 40       	sbci	r20, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <get_button+0x62>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <get_button+0x6c>
     14e:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
     150:	fc 01       	movw	r30, r24
     152:	e6 59       	subi	r30, 0x96	; 150
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	10 82       	st	Z, r1
		return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정		
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret
	}
	
	return 0;   // 버튼이 open상태 
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	08 95       	ret
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

0000016a <init_fnd>:


void init_fnd(void)
{
	// PORTC의 모든 핀을 출력으로 설정
    FND_DATA_DDR = 0xFF; 
     16a:	9f ef       	ldi	r25, 0xFF	; 255
     16c:	94 bb       	out	0x14, r25	; 20
	 
	// 오른쪽 FND 디스플레이 - 분초시계
    FND_DIGIT_DDR |= (1 << FND_R_DIGIT_D1) | (1 << FND_R_DIGIT_D2) | (1 << FND_R_DIGIT_D3) | (1 << FND_R_DIGIT_D4);
     16e:	8a b3       	in	r24, 0x1a	; 26
     170:	80 6f       	ori	r24, 0xF0	; 240
     172:	8a bb       	out	0x1a, r24	; 26
    
    // 왼쪽 FND 디스플레이
    FND_DIGIT_DDR |= (1 << FND_L_DIGIT_D1) | (1 << FND_L_DIGIT_D2) | (1 << FND_L_DIGIT_D3) | (1 << FND_L_DIGIT_D4);
     174:	8a b3       	in	r24, 0x1a	; 26
     176:	8f 60       	ori	r24, 0x0F	; 15
     178:	8a bb       	out	0x1a, r24	; 26
	
    FND_DATA_PORT = ~0x00;  // 모든 세그먼트 OFF (active-low 가정)
     17a:	95 bb       	out	0x15, r25	; 21
     17c:	08 95       	ret

0000017e <fnd_display_0>:
}

void fnd_display_0(uint32_t* seconds, uint32_t* half_seconds) 
{
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	00 d0       	rcall	.+0      	; 0x188 <fnd_display_0+0xa>
     188:	00 d0       	rcall	.+0      	; 0x18a <fnd_display_0+0xc>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	8c 01       	movw	r16, r24
    static int digit_select = 0;		// 현재 활성화된 자리를 기억 (0~3)
	volatile uint32_t idx = *half_seconds;	// 왼쪽 FND 출력 font index
     190:	fb 01       	movw	r30, r22
     192:	80 81       	ld	r24, Z
     194:	91 81       	ldd	r25, Z+1	; 0x01
     196:	a2 81       	ldd	r26, Z+2	; 0x02
     198:	b3 81       	ldd	r27, Z+3	; 0x03
     19a:	89 83       	std	Y+1, r24	; 0x01
     19c:	9a 83       	std	Y+2, r25	; 0x02
     19e:	ab 83       	std	Y+3, r26	; 0x03
     1a0:	bc 83       	std	Y+4, r27	; 0x04
	
	if (wait_flag == 0) {
     1a2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <wait_flag>
     1a6:	81 11       	cpse	r24, r1
     1a8:	1c c0       	rjmp	.+56     	; 0x1e2 <fnd_display_0+0x64>
		if(timer_active == 1){
     1aa:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer_active>
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	79 f4       	brne	.+30     	; 0x1d0 <fnd_display_0+0x52>
			idx %= 12; // 0 ~ 11까지
     1b2:	69 81       	ldd	r22, Y+1	; 0x01
     1b4:	7a 81       	ldd	r23, Y+2	; 0x02
     1b6:	8b 81       	ldd	r24, Y+3	; 0x03
     1b8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ba:	2c e0       	ldi	r18, 0x0C	; 12
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	0e 94 1d 09 	call	0x123a	; 0x123a <__udivmodsi4>
     1c6:	69 83       	std	Y+1, r22	; 0x01
     1c8:	7a 83       	std	Y+2, r23	; 0x02
     1ca:	8b 83       	std	Y+3, r24	; 0x03
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <fnd_display_0+0x74>
		}
		else
			idx = 12;	// 대기 모드이면 STOP 출력
     1d0:	8c e0       	ldi	r24, 0x0C	; 12
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	89 83       	std	Y+1, r24	; 0x01
     1da:	9a 83       	std	Y+2, r25	; 0x02
     1dc:	ab 83       	std	Y+3, r26	; 0x03
     1de:	bc 83       	std	Y+4, r27	; 0x04
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <fnd_display_0+0x74>
	}
	else {
		idx = 13;  // 선택 모드이면 SELT 출력
     1e2:	8d e0       	ldi	r24, 0x0D	; 13
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	89 83       	std	Y+1, r24	; 0x01
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	ab 83       	std	Y+3, r26	; 0x03
     1f0:	bc 83       	std	Y+4, r27	; 0x04
	}
    
    switch (digit_select)
     1f2:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <digit_select.1755>
     1f6:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <digit_select.1755+0x1>
     1fa:	e8 30       	cpi	r30, 0x08	; 8
     1fc:	f1 05       	cpc	r31, r1
     1fe:	08 f0       	brcs	.+2      	; 0x202 <fnd_display_0+0x84>
     200:	c1 c0       	rjmp	.+386    	; 0x384 <fnd_display_0+0x206>
     202:	ea 5b       	subi	r30, 0xBA	; 186
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__tablejump2__>
    {
		// 오른쪽 FND 출력
        case 0:
            FND_DIGIT_PORT = 0x80;  // 우측부터 첫 번째 자리 활성화 (10000000)
     20a:	80 e8       	ldi	r24, 0x80	; 128
     20c:	8b bb       	out	0x1b, r24	; 27
            FND_DATA_PORT = fnd_font[*seconds % 10];  // 초의 일의 자리 (0~9)
     20e:	f8 01       	movw	r30, r16
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	2a e0       	ldi	r18, 0x0A	; 10
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	0e 94 1d 09 	call	0x123a	; 0x123a <__udivmodsi4>
     224:	fb 01       	movw	r30, r22
     226:	ec 57       	subi	r30, 0x7C	; 124
     228:	fe 4f       	sbci	r31, 0xFE	; 254
     22a:	80 81       	ld	r24, Z
     22c:	85 bb       	out	0x15, r24	; 21
            break;
     22e:	aa c0       	rjmp	.+340    	; 0x384 <fnd_display_0+0x206>
            
        case 1:
            FND_DIGIT_PORT = 0x40;  // 우측부터 두 번째 자리 활성화 (01000000)
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	8b bb       	out	0x1b, r24	; 27
            FND_DATA_PORT = fnd_font[(*seconds / 10) % 6];  // 초의 십의 자리 (0~5)
     234:	f8 01       	movw	r30, r16
     236:	60 81       	ld	r22, Z
     238:	71 81       	ldd	r23, Z+1	; 0x01
     23a:	82 81       	ldd	r24, Z+2	; 0x02
     23c:	93 81       	ldd	r25, Z+3	; 0x03
     23e:	2a e0       	ldi	r18, 0x0A	; 10
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	f9 d7       	rcall	.+4082   	; 0x123a <__udivmodsi4>
     248:	ca 01       	movw	r24, r20
     24a:	b9 01       	movw	r22, r18
     24c:	26 e0       	ldi	r18, 0x06	; 6
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	f2 d7       	rcall	.+4068   	; 0x123a <__udivmodsi4>
     256:	fb 01       	movw	r30, r22
     258:	ec 57       	subi	r30, 0x7C	; 124
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	80 81       	ld	r24, Z
     25e:	85 bb       	out	0x15, r24	; 21
            break;
     260:	91 c0       	rjmp	.+290    	; 0x384 <fnd_display_0+0x206>
            
        case 2:
            FND_DIGIT_PORT = 0x20;  // 우측부터 세 번째 자리 활성화 0x20(00100000) => PA7번 핀으로 변경
     262:	80 e2       	ldi	r24, 0x20	; 32
     264:	8b bb       	out	0x1b, r24	; 27
            // 추가 기능: 1초마다 점(특수 패턴)을 깜빡임
           // if ((*seconds) % 2)
           //     FND_DATA_PORT = fnd_font[10] & fnd_font[(*seconds / 60) % 10];
          //  else
                FND_DATA_PORT = fnd_font[(*seconds / 60) % 10];  // 분의 일의 자리 (0~9)
     266:	f8 01       	movw	r30, r16
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	2c e3       	ldi	r18, 0x3C	; 60
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	e0 d7       	rcall	.+4032   	; 0x123a <__udivmodsi4>
     27a:	ca 01       	movw	r24, r20
     27c:	b9 01       	movw	r22, r18
     27e:	2a e0       	ldi	r18, 0x0A	; 10
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	d9 d7       	rcall	.+4018   	; 0x123a <__udivmodsi4>
     288:	fb 01       	movw	r30, r22
     28a:	ec 57       	subi	r30, 0x7C	; 124
     28c:	fe 4f       	sbci	r31, 0xFE	; 254
     28e:	80 81       	ld	r24, Z
     290:	85 bb       	out	0x15, r24	; 21
            break;
     292:	78 c0       	rjmp	.+240    	; 0x384 <fnd_display_0+0x206>
            
        case 3:
            FND_DIGIT_PORT = 0x10;  // 우측부터 네 번째 자리 활성화 (00010000)
     294:	80 e1       	ldi	r24, 0x10	; 16
     296:	8b bb       	out	0x1b, r24	; 27
            FND_DATA_PORT = fnd_font[(*seconds / 600) % 6];  // 분의 십의 자리 (0~5)
     298:	f8 01       	movw	r30, r16
     29a:	60 81       	ld	r22, Z
     29c:	71 81       	ldd	r23, Z+1	; 0x01
     29e:	82 81       	ldd	r24, Z+2	; 0x02
     2a0:	93 81       	ldd	r25, Z+3	; 0x03
     2a2:	28 e5       	ldi	r18, 0x58	; 88
     2a4:	32 e0       	ldi	r19, 0x02	; 2
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	c7 d7       	rcall	.+3982   	; 0x123a <__udivmodsi4>
     2ac:	ca 01       	movw	r24, r20
     2ae:	b9 01       	movw	r22, r18
     2b0:	26 e0       	ldi	r18, 0x06	; 6
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	c0 d7       	rcall	.+3968   	; 0x123a <__udivmodsi4>
     2ba:	fb 01       	movw	r30, r22
     2bc:	ec 57       	subi	r30, 0x7C	; 124
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	80 81       	ld	r24, Z
     2c2:	85 bb       	out	0x15, r24	; 21
            break;
     2c4:	5f c0       	rjmp	.+190    	; 0x384 <fnd_display_0+0x206>
		
		// 왼쪽 FND 출력(애니메이션 용)
		case 4:
			FND_DIGIT_PORT = 0x08;  // 우측부터 첫 번째 자리
     2c6:	88 e0       	ldi	r24, 0x08	; 8
     2c8:	8b bb       	out	0x1b, r24	; 27
			FND_DATA_PORT = fnd_font_circle[motor_forward][0][idx];
     2ca:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <motor_forward>
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	ee 0f       	add	r30, r30
     2d2:	ff 1f       	adc	r31, r31
     2d4:	e0 50       	subi	r30, 0x00	; 0
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	01 90       	ld	r0, Z+
     2da:	f0 81       	ld	r31, Z
     2dc:	e0 2d       	mov	r30, r0
     2de:	20 81       	ld	r18, Z
     2e0:	31 81       	ldd	r19, Z+1	; 0x01
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	ab 81       	ldd	r26, Y+3	; 0x03
     2e8:	bc 81       	ldd	r27, Y+4	; 0x04
     2ea:	f9 01       	movw	r30, r18
     2ec:	e8 0f       	add	r30, r24
     2ee:	f9 1f       	adc	r31, r25
     2f0:	80 81       	ld	r24, Z
     2f2:	85 bb       	out	0x15, r24	; 21
			break;
     2f4:	47 c0       	rjmp	.+142    	; 0x384 <fnd_display_0+0x206>
		
		case 5:
			FND_DIGIT_PORT = 0x04;  // 우측부터 두 번째 자리
     2f6:	84 e0       	ldi	r24, 0x04	; 4
     2f8:	8b bb       	out	0x1b, r24	; 27
			FND_DATA_PORT = fnd_font_circle[motor_forward][1][idx];
     2fa:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <motor_forward>
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	e0 50       	subi	r30, 0x00	; 0
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	01 90       	ld	r0, Z+
     30a:	f0 81       	ld	r31, Z
     30c:	e0 2d       	mov	r30, r0
     30e:	22 81       	ldd	r18, Z+2	; 0x02
     310:	33 81       	ldd	r19, Z+3	; 0x03
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	ab 81       	ldd	r26, Y+3	; 0x03
     318:	bc 81       	ldd	r27, Y+4	; 0x04
     31a:	f9 01       	movw	r30, r18
     31c:	e8 0f       	add	r30, r24
     31e:	f9 1f       	adc	r31, r25
     320:	80 81       	ld	r24, Z
     322:	85 bb       	out	0x15, r24	; 21
			break;
     324:	2f c0       	rjmp	.+94     	; 0x384 <fnd_display_0+0x206>
		
		case 6:
			FND_DIGIT_PORT = 0x02;  // 우측부터 세 번째 자리
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	8b bb       	out	0x1b, r24	; 27
			FND_DATA_PORT = fnd_font_circle[motor_forward][2][idx];
     32a:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <motor_forward>
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e0 50       	subi	r30, 0x00	; 0
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	01 90       	ld	r0, Z+
     33a:	f0 81       	ld	r31, Z
     33c:	e0 2d       	mov	r30, r0
     33e:	24 81       	ldd	r18, Z+4	; 0x04
     340:	35 81       	ldd	r19, Z+5	; 0x05
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	ab 81       	ldd	r26, Y+3	; 0x03
     348:	bc 81       	ldd	r27, Y+4	; 0x04
     34a:	f9 01       	movw	r30, r18
     34c:	e8 0f       	add	r30, r24
     34e:	f9 1f       	adc	r31, r25
     350:	80 81       	ld	r24, Z
     352:	85 bb       	out	0x15, r24	; 21
			break;
     354:	17 c0       	rjmp	.+46     	; 0x384 <fnd_display_0+0x206>
		
		case 7:
			FND_DIGIT_PORT = 0x01;  // 우측부터 네 번째 자리
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	8b bb       	out	0x1b, r24	; 27
			FND_DATA_PORT = fnd_font_circle[motor_forward][3][idx];
     35a:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <motor_forward>
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	e0 50       	subi	r30, 0x00	; 0
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	01 90       	ld	r0, Z+
     36a:	f0 81       	ld	r31, Z
     36c:	e0 2d       	mov	r30, r0
     36e:	26 81       	ldd	r18, Z+6	; 0x06
     370:	37 81       	ldd	r19, Z+7	; 0x07
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	ab 81       	ldd	r26, Y+3	; 0x03
     378:	bc 81       	ldd	r27, Y+4	; 0x04
     37a:	f9 01       	movw	r30, r18
     37c:	e8 0f       	add	r30, r24
     37e:	f9 1f       	adc	r31, r25
     380:	80 81       	ld	r24, Z
     382:	85 bb       	out	0x15, r24	; 21
			break;	
    }
    
    // 다음 자리로 이동 (순환 방식)
    digit_select = (digit_select + 1) % 8;
     384:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <digit_select.1755>
     388:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <digit_select.1755+0x1>
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	87 70       	andi	r24, 0x07	; 7
     390:	90 78       	andi	r25, 0x80	; 128
     392:	99 23       	and	r25, r25
     394:	24 f4       	brge	.+8      	; 0x39e <fnd_display_0+0x220>
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	88 6f       	ori	r24, 0xF8	; 248
     39a:	9f 6f       	ori	r25, 0xFF	; 255
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <digit_select.1755+0x1>
     3a2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <digit_select.1755>
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <__vector_16>:
extern const int my_song[]; // 종료 음악 음계
const int my_song_Beats[];  // 종료 음악 비트

// Timer0 오버플로우 인터럽트 벡터
ISR(TIMER0_OVF_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	0b b6       	in	r0, 0x3b	; 59
     3c4:	0f 92       	push	r0
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	TCNT0 = 6;					// 타이머 카운터 재설정
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	82 bf       	out	0x32, r24	; 50
	if (timer_active == 1)
     3e6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer_active>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	b1 f5       	brne	.+108    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		milliseconds++;					// 밀리초 카운터 증가
     3ee:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <milliseconds>
     3f2:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <milliseconds+0x1>
     3f6:	a0 91 87 02 	lds	r26, 0x0287	; 0x800287 <milliseconds+0x2>
     3fa:	b0 91 88 02 	lds	r27, 0x0288	; 0x800288 <milliseconds+0x3>
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	a1 1d       	adc	r26, r1
     402:	b1 1d       	adc	r27, r1
     404:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <milliseconds>
     408:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <milliseconds+0x1>
     40c:	a0 93 87 02 	sts	0x0287, r26	; 0x800287 <milliseconds+0x2>
     410:	b0 93 88 02 	sts	0x0288, r27	; 0x800288 <milliseconds+0x3>
		milliseconds_1 += (speed % 6);	// motor speed에 따라 증가량 변동
     414:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <speed>
     418:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <speed+0x1>
     41c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <speed+0x2>
     420:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <speed+0x3>
     424:	26 e0       	ldi	r18, 0x06	; 6
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	06 d7       	rcall	.+3596   	; 0x123a <__udivmodsi4>
     42e:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <milliseconds_1>
     432:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <milliseconds_1+0x1>
     436:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <milliseconds_1+0x2>
     43a:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <milliseconds_1+0x3>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	80 0f       	add	r24, r16
     444:	91 1f       	adc	r25, r17
     446:	a2 1f       	adc	r26, r18
     448:	b3 1f       	adc	r27, r19
     44a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <milliseconds_1>
     44e:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <milliseconds_1+0x1>
     452:	a0 93 83 02 	sts	0x0283, r26	; 0x800283 <milliseconds_1+0x2>
     456:	b0 93 84 02 	sts	0x0284, r27	; 0x800284 <milliseconds_1+0x3>
	}
	displayUpdateCounter++;				// 디스플레이 갱신 신호
     45a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <displayUpdateCounter>
     45e:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <displayUpdateCounter+0x1>
     462:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <displayUpdateCounter+0x2>
     466:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <displayUpdateCounter+0x3>
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	a1 1d       	adc	r26, r1
     46e:	b1 1d       	adc	r27, r1
     470:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <displayUpdateCounter>
     474:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <displayUpdateCounter+0x1>
     478:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <displayUpdateCounter+0x2>
     47c:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <displayUpdateCounter+0x3>
}
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	0f 90       	pop	r0
     49e:	0b be       	out	0x3b, r0	; 59
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <init_timer_0>:

// 타이머 카운트 0으로 초기화
void init_timer_0(void)
{
	// 초기 카운터값 설정
	TCNT0 = 6;
     4aa:	86 e0       	ldi	r24, 0x06	; 6
     4ac:	82 bf       	out	0x32, r24	; 50
	
	// 분주비 256 : CS02 = 1, CS01 = 0, CS00 = 0
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);
     4ae:	83 b7       	in	r24, 0x33	; 51
     4b0:	84 60       	ori	r24, 0x04	; 4
     4b2:	83 bf       	out	0x33, r24	; 51
	
	// Timer0 오버플로우 인터럽트 허용
	TIMSK |= (1 << TOIE0);
     4b4:	87 b7       	in	r24, 0x37	; 55
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	87 bf       	out	0x37, r24	; 55
     4ba:	08 95       	ret

000004bc <init_led>:
}

// led(0~2) 초기화
void init_led(void)
{
	DDRB |= (1 << LED0_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN);     // LED 핀을 출력으로 설정
     4bc:	87 b3       	in	r24, 0x17	; 23
     4be:	8d 60       	ori	r24, 0x0D	; 13
     4c0:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1 << LED0_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN)); // 초기 상태: 모든 LED OFF
     4c2:	88 b3       	in	r24, 0x18	; 24
     4c4:	82 7f       	andi	r24, 0xF2	; 242
     4c6:	88 bb       	out	0x18, r24	; 24
     4c8:	08 95       	ret

000004ca <init_all>:
}

// 모든 주변장치 초기화
void init_all(void)
{
	init_button();
     4ca:	07 de       	rcall	.-1010   	; 0xda <init_button>
	init_fnd();
     4cc:	4e de       	rcall	.-868    	; 0x16a <init_fnd>
	init_timer_0();
     4ce:	ed df       	rcall	.-38     	; 0x4aa <init_timer_0>
	init_timer3();
     4d0:	c5 d2       	rcall	.+1418   	; 0xa5c <init_timer3>
	init_L298N();
     4d2:	dc d2       	rcall	.+1464   	; 0xa8c <init_L298N>
     4d4:	ed d2       	rcall	.+1498   	; 0xab0 <init_speaker>
	init_speaker();	//부저 출력
     4d6:	c1 d3       	rcall	.+1922   	; 0xc5a <init_uart0>
     4d8:	f1 df       	rcall	.-30     	; 0x4bc <init_led>
	init_uart0();
     4da:	8f e8       	ldi	r24, 0x8F	; 143
     4dc:	91 e0       	ldi	r25, 0x01	; 1
	init_led();
     4de:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <__iob+0x3>
	stdout = &OUTPUT;
     4e2:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <__iob+0x2>
     4e6:	78 94       	sei
     4e8:	08 95       	ret

000004ea <update_led_display>:
     4ea:	98 b3       	in	r25, 0x18	; 24
     4ec:	92 7f       	andi	r25, 0xF2	; 242
	
	// 전역 인터럽트 허용
	sei();
     4ee:	98 bb       	out	0x18, r25	; 24
     4f0:	81 30       	cpi	r24, 0x01	; 1
// 현재 세탁 단계에 맞춰 LED 표시
void update_led_display(uint8_t stage)
{
	PORTB &= ~((1 << LED0_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN)); // 모든 LED OFF

	switch (stage)
     4f2:	41 f0       	breq	.+16     	; 0x504 <update_led_display+0x1a>
     4f4:	18 f0       	brcs	.+6      	; 0x4fc <update_led_display+0x12>
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	49 f0       	breq	.+18     	; 0x50c <update_led_display+0x22>
     4fa:	08 95       	ret
	{
		case 0: PORTB |= (1 << LED0_PIN); break; // 세탁 LED0 ON
     4fc:	88 b3       	in	r24, 0x18	; 24
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	88 bb       	out	0x18, r24	; 24
     502:	08 95       	ret
		case 1: PORTB |= (1 << LED2_PIN); break; // 헹굼 LED1 ON
     504:	88 b3       	in	r24, 0x18	; 24
     506:	84 60       	ori	r24, 0x04	; 4
     508:	88 bb       	out	0x18, r24	; 24
     50a:	08 95       	ret
		case 2: PORTB |= (1 << LED3_PIN); break; // 탈수 LED2 ON
     50c:	88 b3       	in	r24, 0x18	; 24
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	88 bb       	out	0x18, r24	; 24
     512:	08 95       	ret

00000514 <motor_right_left>:
}

// 정회전, 역회전 설정 함수
void motor_right_left(void)
{
	PORTF &= ~((1 << 6) | (1 << 7)); // IN1, IN2 초기화 (모터 정지)
     514:	e2 e6       	ldi	r30, 0x62	; 98
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	8f 73       	andi	r24, 0x3F	; 63
     51c:	80 83       	st	Z, r24

	if (wash_stage == 0 || wash_stage == 2)  // 세탁(정회전), 탈수(정회전)
     51e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <wash_stage>
     522:	88 23       	and	r24, r24
     524:	11 f0       	breq	.+4      	; 0x52a <motor_right_left+0x16>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	49 f4       	brne	.+18     	; 0x53c <motor_right_left+0x28>
	{
		PORTF |= (1 << 6); //  정회전
     52a:	e2 e6       	ldi	r30, 0x62	; 98
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	80 64       	ori	r24, 0x40	; 64
     532:	80 83       	st	Z, r24
		motor_forward = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <motor_forward>
     53a:	08 95       	ret
	}
	else if (wash_stage == 1)  // 헹굼 모드 (사용자가 설정한 방향 반영)
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	39 f4       	brne	.+14     	; 0x54e <motor_right_left+0x3a>
	{
		PORTF |= (1 << 7);  // 역회전
     540:	e2 e6       	ldi	r30, 0x62	; 98
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	80 68       	ori	r24, 0x80	; 128
     548:	80 83       	st	Z, r24
		motor_forward = 0;
     54a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <motor_forward>
     54e:	08 95       	ret

00000550 <motor_on>:
}

// 모터_ON 하기 위한 초기화 함수
void motor_on()
{
	wash_running = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <wash_running>
	timer_active = 1;
     556:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <timer_active>
	motor_active = 1;
     55a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <motor_active>
	OCR3C = 250;
     55e:	8a ef       	ldi	r24, 0xFA	; 250
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     566:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     56a:	08 95       	ret

0000056c <motor_down>:
}

// 모터_OFF 하기 위한 초기화 함수
void motor_down()
{
	wash_running = 0;
     56c:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <wash_running>
	timer_active = 0;
     570:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <timer_active>
	motor_active = 0;
     574:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <motor_active>
	OCR3C = 0;
     578:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     57c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     580:	08 95       	ret

00000582 <__vector_12>:
	displayUpdateCounter++;				// 디스플레이 갱신 신호
}

// 1초마다 실행되는 타이머 인터럽트 (시간 감소)
ISR(TIMER1_COMPA_vect)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	0b b6       	in	r0, 0x3b	; 59
     58e:	0f 92       	push	r0
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	ef 93       	push	r30
     5a6:	ff 93       	push	r31
	if (timer_active && wash_running && seconds > 0) 
     5a8:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer_active>
     5ac:	88 23       	and	r24, r24
     5ae:	b1 f1       	breq	.+108    	; 0x61c <__vector_12+0x9a>
     5b0:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <wash_running>
     5b4:	88 23       	and	r24, r24
     5b6:	91 f1       	breq	.+100    	; 0x61c <__vector_12+0x9a>
     5b8:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     5bc:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     5c0:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     5c4:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     5c8:	89 2b       	or	r24, r25
     5ca:	8a 2b       	or	r24, r26
     5cc:	8b 2b       	or	r24, r27
     5ce:	31 f1       	breq	.+76     	; 0x61c <__vector_12+0x9a>
	{
		seconds--;  // 1초 감소
     5d0:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     5d4:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     5d8:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     5dc:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	a1 09       	sbc	r26, r1
     5e4:	b1 09       	sbc	r27, r1
     5e6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     5ea:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     5ee:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
     5f2:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
		print_flag = 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <print_flag>
		
		if (seconds == 0) // 초가 0이면 모터 종료
     5fc:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     600:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     604:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     608:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     60c:	89 2b       	or	r24, r25
     60e:	8a 2b       	or	r24, r26
     610:	8b 2b       	or	r24, r27
     612:	21 f4       	brne	.+8      	; 0x61c <__vector_12+0x9a>
		{
			motor_down();
     614:	ab df       	rcall	.-170    	; 0x56c <motor_down>
			print_flag = 1;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <print_flag>
		}
	}
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	3f 91       	pop	r19
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0b be       	out	0x3b, r0	; 59
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <main>:

int main(void)
{
    // 모든 주변장치 초기화
    init_all();
     642:	43 df       	rcall	.-378    	; 0x4ca <init_all>
 
    while (1)
    {
        pc_command_processing(); // UART 처리 함수
     644:	32 d3       	rcall	.+1636   	; 0xcaa <pc_command_processing>
		UART0_print_buffer();    // COMPARTMASTER에 출력
     646:	1d d3       	rcall	.+1594   	; 0xc82 <UART0_print_buffer>
     648:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer_active>
		
		if (timer_active)
     64c:	88 23       	and	r24, r24
     64e:	09 f4       	brne	.+2      	; 0x652 <main+0x10>
     650:	7e c0       	rjmp	.+252    	; 0x74e <main+0x10c>
     652:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <milliseconds>
        {
            if (milliseconds > 999)
     656:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <milliseconds+0x1>
     65a:	a0 91 87 02 	lds	r26, 0x0287	; 0x800287 <milliseconds+0x2>
     65e:	b0 91 88 02 	lds	r27, 0x0288	; 0x800288 <milliseconds+0x3>
     662:	88 3e       	cpi	r24, 0xE8	; 232
     664:	93 40       	sbci	r25, 0x03	; 3
     666:	a1 05       	cpc	r26, r1
     668:	b1 05       	cpc	r27, r1
     66a:	08 f4       	brcc	.+2      	; 0x66e <main+0x2c>
     66c:	70 c0       	rjmp	.+224    	; 0x74e <main+0x10c>
     66e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <milliseconds>
            {
                milliseconds = 0;
     672:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <milliseconds+0x1>
     676:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <milliseconds+0x2>
     67a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <milliseconds+0x3>
     67e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
                if (seconds > 0)
     682:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     686:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     68a:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     68e:	89 2b       	or	r24, r25
     690:	8a 2b       	or	r24, r26
     692:	8b 2b       	or	r24, r27
     694:	d9 f0       	breq	.+54     	; 0x6cc <main+0x8a>
     696:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
                {
                    seconds--;
     69a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     69e:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     6a2:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	a1 09       	sbc	r26, r1
     6aa:	b1 09       	sbc	r27, r1
     6ac:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     6b0:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     6b4:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
     6b8:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
     6bc:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
                    fnd_display_0(&seconds, f_hsec);
     6c0:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     6c4:	89 e7       	ldi	r24, 0x79	; 121
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	5a dd       	rcall	.-1356   	; 0x17e <fnd_display_0>
     6ca:	41 c0       	rjmp	.+130    	; 0x74e <main+0x10c>
     6cc:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <wash_stage>
                }
                else
                {
                    wash_stage++;  // 세탁 단계 진행 (세탁 → 헹굼 → 탈수)
     6d0:	ef 5f       	subi	r30, 0xFF	; 255
     6d2:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <wash_stage>
     6d6:	e3 30       	cpi	r30, 0x03	; 3
                    if (wash_stage < 3)
     6d8:	40 f5       	brcc	.+80     	; 0x72a <main+0xe8>
     6da:	f0 e0       	ldi	r31, 0x00	; 0
                    {
                        seconds = wash_times[wash_stage]; // 각 모드의 설정 시간을 sceonds에 담는다.
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	e3 56       	subi	r30, 0x63	; 99
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	a2 81       	ldd	r26, Z+2	; 0x02
     6ee:	b3 81       	ldd	r27, Z+3	; 0x03
     6f0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     6f4:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     6f8:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
     6fc:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
     700:	81 e0       	ldi	r24, 0x01	; 1
                        motor_active = 1;
     702:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <motor_active>
     706:	8a ef       	ldi	r24, 0xFA	; 250
                        OCR3C = 250;
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     70e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
                        
                        motor_right_left(); // 모터 방향 설정
     712:	00 df       	rcall	.-512    	; 0x514 <motor_right_left>
     714:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
                        
                        fnd_display_0(&seconds, f_hsec);
     718:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     71c:	89 e7       	ldi	r24, 0x79	; 121
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	2e dd       	rcall	.-1444   	; 0x17e <fnd_display_0>
                        update_led_display(wash_stage);
     722:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <wash_stage>
     726:	e1 de       	rcall	.-574    	; 0x4ea <update_led_display>
     728:	12 c0       	rjmp	.+36     	; 0x74e <main+0x10c>
     72a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <half_seconds>
                    }
                    else
                    {
                        half_seconds = 0; 
     72e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <half_seconds+0x1>
     732:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <half_seconds+0x2>
     736:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <half_seconds+0x3>
                        motor_down();
     73a:	18 df       	rcall	.-464    	; 0x56c <motor_down>
                        mode = WAIT_MODE;
     73c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <mode>
                        update_led_display(255);
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	d3 de       	rcall	.-602    	; 0x4ea <update_led_display>
						
						Music_Player(my_song, my_song_Beats);  //세탁 종료 노래
     744:	62 eb       	ldi	r22, 0xB2	; 178
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	80 ed       	ldi	r24, 0xD0	; 208
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	ec d1       	rcall	.+984    	; 0xb26 <Music_Player>
     74e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <wash_stage>
                }
            }
        }
        
        // 0.5초 Count (탈수 모드에서는 속도를 2배 빠르게)
        if ((wash_stage == 2 && milliseconds_1 > 249) || (wash_stage != 2 && milliseconds_1 > 499))
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	69 f4       	brne	.+26     	; 0x770 <main+0x12e>
     756:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <milliseconds_1>
     75a:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <milliseconds_1+0x1>
     75e:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <milliseconds_1+0x2>
     762:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <milliseconds_1+0x3>
     766:	4a 3f       	cpi	r20, 0xFA	; 250
     768:	51 05       	cpc	r21, r1
     76a:	61 05       	cpc	r22, r1
     76c:	71 05       	cpc	r23, r1
     76e:	78 f4       	brcc	.+30     	; 0x78e <main+0x14c>
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	41 f1       	breq	.+80     	; 0x7c4 <main+0x182>
     774:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <milliseconds_1>
     778:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <milliseconds_1+0x1>
     77c:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <milliseconds_1+0x2>
     780:	b0 91 84 02 	lds	r27, 0x0284	; 0x800284 <milliseconds_1+0x3>
     784:	84 3f       	cpi	r24, 0xF4	; 244
     786:	91 40       	sbci	r25, 0x01	; 1
     788:	a1 05       	cpc	r26, r1
     78a:	b1 05       	cpc	r27, r1
     78c:	d8 f0       	brcs	.+54     	; 0x7c4 <main+0x182>
     78e:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <milliseconds_1>
        {
            milliseconds_1 = 0;
     792:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <milliseconds_1+0x1>
     796:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <milliseconds_1+0x2>
     79a:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <milliseconds_1+0x3>
     79e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <half_seconds>
            half_seconds++;
     7a2:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <half_seconds+0x1>
     7a6:	a0 91 77 02 	lds	r26, 0x0277	; 0x800277 <half_seconds+0x2>
     7aa:	b0 91 78 02 	lds	r27, 0x0278	; 0x800278 <half_seconds+0x3>
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	a1 1d       	adc	r26, r1
     7b2:	b1 1d       	adc	r27, r1
     7b4:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <half_seconds>
     7b8:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <half_seconds+0x1>
     7bc:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <half_seconds+0x2>
     7c0:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <half_seconds+0x3>
     7c4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <displayUpdateCounter>
        }

        // 7-Segment Display 갱신
        if (displayUpdateCounter > 1) 
     7c8:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <displayUpdateCounter+0x1>
     7cc:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <displayUpdateCounter+0x2>
     7d0:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <displayUpdateCounter+0x3>
     7d4:	02 97       	sbiw	r24, 0x02	; 2
     7d6:	a1 05       	cpc	r26, r1
     7d8:	b1 05       	cpc	r27, r1
     7da:	88 f0       	brcs	.+34     	; 0x7fe <main+0x1bc>
     7dc:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <displayUpdateCounter>
        {
            displayUpdateCounter = 0;
     7e0:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <displayUpdateCounter+0x1>
     7e4:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <displayUpdateCounter+0x2>
     7e8:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <displayUpdateCounter+0x3>
            
            // 출력 함수 호출
            fnd_display_0(f_sec, f_hsec);
     7ec:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
     7f0:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     7f4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <f_sec>
     7f8:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <f_sec+0x1>
     7fc:	c0 dc       	rcall	.-1664   	; 0x17e <fnd_display_0>
        }

        // 0번 버튼 입력
        if (get_button(BUTTON0, BUTTON0PIN))
     7fe:	64 e0       	ldi	r22, 0x04	; 4
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	6d dc       	rcall	.-1830   	; 0xe2 <get_button>
     808:	89 2b       	or	r24, r25
     80a:	09 f4       	brne	.+2      	; 0x80e <main+0x1cc>
     80c:	42 c0       	rjmp	.+132    	; 0x892 <main+0x250>
     80e:	81 e0       	ldi	r24, 0x01	; 1
        {
            wait_flag = !wait_flag; // 0이면 대기모드 1이면 시간 설정모드 (FND에 표시되기 위함)
     810:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <wait_flag>
     814:	91 11       	cpse	r25, r1
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <wait_flag>
     81c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mode>
			switch (mode)
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	81 f0       	breq	.+32     	; 0x844 <main+0x202>
     824:	18 f0       	brcs	.+6      	; 0x82c <main+0x1ea>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	c1 f0       	breq	.+48     	; 0x85a <main+0x218>
     82a:	0c cf       	rjmp	.-488    	; 0x644 <main+0x2>
     82c:	81 e0       	ldi	r24, 0x01	; 1
            {
                case WAIT_MODE:
					mode = TIME_SET_MODE;  // 대기 모드 → 시간 설정 모드 전환
     82e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <mode>
     832:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <timer_active>
					timer_active = 0;  // 타이머 정지
     836:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <motor_active>
					motor_active = 0;  // 모터 정지
     83a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
					OCR3C = 0;         // 모터 PWM 0으로 설정
     83e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     842:	00 cf       	rjmp	.-512    	; 0x644 <main+0x2>
					break;
     844:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <mode>

                case TIME_SET_MODE:
					mode = WAIT_MODE;  // 시간 설정 모드 → 대기 모드 전환
     848:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <timer_active>
					timer_active = 0;  // 타이머 정지
     84c:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <motor_active>
					motor_active = 0;  // 모터 정지
     850:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
					OCR3C = 0;         // 모터 PWM 0으로 설정
     854:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     858:	f5 ce       	rjmp	.-534    	; 0x644 <main+0x2>
					break;
     85a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <timer_active>

                case WASHING_MODE: // 세탁 모드였다가 0번 누르면 대기모드로 전환
					timer_active = !timer_active;  
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	91 11       	cpse	r25, r1
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <timer_active>
     868:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <motor_active>
					motor_active = !motor_active;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	91 11       	cpse	r25, r1
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <motor_active>
     876:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <motor_active>
					OCR3C = (motor_active) ? 250 : 0;
     87a:	88 23       	and	r24, r24
     87c:	19 f0       	breq	.+6      	; 0x884 <main+0x242>
     87e:	8a ef       	ldi	r24, 0xFA	; 250
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	02 c0       	rjmp	.+4      	; 0x888 <main+0x246>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     88c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
					break;
            }
        }

        // 1번 버튼 입력
        else if (get_button(BUTTON1, BUTTON1PIN)) 
     890:	d9 ce       	rjmp	.-590    	; 0x644 <main+0x2>
     892:	65 e0       	ldi	r22, 0x05	; 5
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	23 dc       	rcall	.-1978   	; 0xe2 <get_button>
     89c:	89 2b       	or	r24, r25
     89e:	89 f1       	breq	.+98     	; 0x902 <main+0x2c0>
        {
            Beep(1);  // 버튼 처리 후 부저 작동
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	11 d1       	rcall	.+546    	; 0xac8 <Beep>
     8a6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mode>
            if(mode == TIME_SET_MODE) // 시간 설정 모드일때 10씩 시간 증가
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <main+0x26e>
     8ae:	ca ce       	rjmp	.-620    	; 0x644 <main+0x2>
     8b0:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
            {
			      if (seconds < 99) 
     8b4:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     8b8:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     8bc:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     8c0:	83 36       	cpi	r24, 0x63	; 99
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <main+0x28a>
     8ca:	bc ce       	rjmp	.-648    	; 0x644 <main+0x2>
     8cc:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
                  {
                       seconds += 10;
     8d0:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     8d4:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     8d8:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     8dc:	0a 96       	adiw	r24, 0x0a	; 10
     8de:	a1 1d       	adc	r26, r1
     8e0:	b1 1d       	adc	r27, r1
     8e2:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     8e6:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     8ea:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
     8ee:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
                       fnd_display_0(&seconds, f_hsec);
     8f2:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
     8f6:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     8fa:	89 e7       	ldi	r24, 0x79	; 121
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	3f dc       	rcall	.-1922   	; 0x17e <fnd_display_0>
                  }
            }
        }

        // 2번 버튼 입력
        else if (get_button(BUTTON2, BUTTON2PIN))
     900:	a1 ce       	rjmp	.-702    	; 0x644 <main+0x2>
     902:	66 e0       	ldi	r22, 0x06	; 6
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	eb db       	rcall	.-2090   	; 0xe2 <get_button>
     90c:	89 2b       	or	r24, r25
     90e:	09 f4       	brne	.+2      	; 0x912 <main+0x2d0>
     910:	4f c0       	rjmp	.+158    	; 0x9b0 <main+0x36e>
        {
            Beep(1);  // 버튼 처리 후 부저 작동
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	d8 d0       	rcall	.+432    	; 0xac8 <Beep>
     918:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mode>
			if(mode == TIME_SET_MODE)
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	31 f5       	brne	.+76     	; 0x96c <main+0x32a>
     920:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
            {
                if (seconds > 0) // 시간 설정 모드일때 시간 감소
     924:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     928:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     92c:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     930:	89 2b       	or	r24, r25
     932:	8a 2b       	or	r24, r26
     934:	8b 2b       	or	r24, r27
     936:	d1 f0       	breq	.+52     	; 0x96c <main+0x32a>
     938:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
                {
                    seconds-=10;
     93c:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     940:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     944:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     948:	0a 97       	sbiw	r24, 0x0a	; 10
     94a:	a1 09       	sbc	r26, r1
     94c:	b1 09       	sbc	r27, r1
     94e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     952:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     956:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
     95a:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
                    // FND에 업데이트된 값 표시
                    fnd_display_0(&seconds, f_hsec);
     95e:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
     962:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     966:	89 e7       	ldi	r24, 0x79	; 121
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	09 dc       	rcall	.-2030   	; 0x17e <fnd_display_0>
     96c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mode>
                }
            }
            
            if(mode == WAIT_MODE)
     970:	81 11       	cpse	r24, r1
     972:	68 ce       	rjmp	.-816    	; 0x644 <main+0x2>
     974:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <wash_stage>
            {
                mode == WASHING_MODE;
				wash_stage = 0; // 세탁부터 시작
     978:	81 e0       	ldi	r24, 0x01	; 1
                wash_running = 1; // 세탁 진행 활성화
     97a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <wash_running>
                seconds = wash_times[wash_stage]; // 현재 단계의 시간 설정
     97e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <wash_times>
     982:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <wash_times+0x1>
     986:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <wash_times+0x2>
     98a:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <wash_times+0x3>
     98e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     992:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     996:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
				
                motor_on();
     99a:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
                fnd_display_0(&seconds, f_hsec); 
     99e:	d8 dd       	rcall	.-1104   	; 0x550 <motor_on>
     9a0:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
     9a4:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     9a8:	89 e7       	ldi	r24, 0x79	; 121
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	e8 db       	rcall	.-2096   	; 0x17e <fnd_display_0>
            }
        }
        
        // 3번 버튼 입력 
        else if (get_button(BUTTON3, BUTTON3PIN)) // 세탁 시간 저장 버튼
     9ae:	4a ce       	rjmp	.-876    	; 0x644 <main+0x2>
     9b0:	67 e0       	ldi	r22, 0x07	; 7
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	94 db       	rcall	.-2264   	; 0xe2 <get_button>
     9ba:	89 2b       	or	r24, r25
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <main+0x37e>
     9be:	42 ce       	rjmp	.-892    	; 0x644 <main+0x2>
        {
            Beep(1);  // 버튼 처리 후 부저 작동
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	81 d0       	rcall	.+258    	; 0xac8 <Beep>
     9c6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <mode>
			if (mode == TIME_SET_MODE) // 시간 설정 모드일 때만 동작
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	31 f5       	brne	.+76     	; 0xa1a <main+0x3d8>
     9ce:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <time_setting_stage>
            {
                wash_times[time_setting_stage] = seconds;
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     9d8:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     9dc:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     9e0:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	ee 0f       	add	r30, r30
     9ea:	ff 1f       	adc	r31, r31
     9ec:	e3 56       	subi	r30, 0x63	; 99
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	80 83       	st	Z, r24
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	a2 83       	std	Z+2, r26	; 0x02
                
                fnd_display_0(&seconds, f_hsec);
     9f6:	b3 83       	std	Z+3, r27	; 0x03
     9f8:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
     9fc:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     a00:	89 e7       	ldi	r24, 0x79	; 121
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	bc db       	rcall	.-2184   	; 0x17e <fnd_display_0>
				time_setting_stage = (time_setting_stage + 1) % 3;
     a06:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <time_setting_stage>
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	63 e0       	ldi	r22, 0x03	; 3
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	00 d4       	rcall	.+2048   	; 0x1214 <__divmodhi4>
     a14:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <time_setting_stage>
     a18:	15 ce       	rjmp	.-982    	; 0x644 <main+0x2>
     a1a:	81 11       	cpse	r24, r1
            }
            else if (mode == WAIT_MODE) // 대기 모드일때 시간 초기화.
     a1c:	13 ce       	rjmp	.-986    	; 0x644 <main+0x2>
     a1e:	8c e0       	ldi	r24, 0x0C	; 12
            {
                 memset(wash_times, 0, sizeof(wash_times));
     a20:	ed e9       	ldi	r30, 0x9D	; 157
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	df 01       	movw	r26, r30
     a26:	1d 92       	st	X+, r1
     a28:	8a 95       	dec	r24
     a2a:	e9 f7       	brne	.-6      	; 0xa26 <main+0x3e4>
				 seconds = 0; 
     a2c:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <seconds>
     a30:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <seconds+0x1>
     a34:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <seconds+0x2>
     a38:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <seconds+0x3>
                 motor_active = 0;         
     a3c:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <motor_active>
                 motor_forward = 0;
     a40:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <motor_forward>
				 OCR3C = 0;
     a44:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a48:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
                 fnd_display_0(&seconds, f_hsec); 
     a4c:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <f_hsec>
     a50:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <f_hsec+0x1>
     a54:	89 e7       	ldi	r24, 0x79	; 121
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	92 db       	rcall	.-2268   	; 0x17e <fnd_display_0>
     a5a:	f4 cd       	rjmp	.-1048   	; 0x644 <main+0x2>

00000a5c <init_timer3>:
	BTN2 : speed down (OC3C : 20씩 감소, min = 60)
*/

void init_timer3(void)
{
	DDRE |= 1 << 3 | 1 << 5;		//  현재 4번핀은 초음파 echo
     a5c:	82 b1       	in	r24, 0x02	; 2
     a5e:	88 62       	ori	r24, 0x28	; 40
     a60:	82 b9       	out	0x02, r24	; 2
	
	// 16bit Timer3의 모드 5 : 8비트 고속 PWM (p.348 표15-6)
	TCCR3A |= 1 << WGM30;
     a62:	ab e8       	ldi	r26, 0x8B	; 139
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	8c 91       	ld	r24, X
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     a6c:	ea e8       	ldi	r30, 0x8A	; 138
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	88 60       	ori	r24, 0x08	; 8
     a74:	80 83       	st	Z, r24
	
	// 비반전 모드
	// 사용자가 설정한 PWM값에 일치시 OC3C의 출력핀이 LOW로 바뀌고 BOTTOM에 HIGH로 바뀐다.
	// p.350 표15-7
	TCCR3A |= 1 << COM3C1;
     a76:	8c 91       	ld	r24, X
     a78:	88 60       	ori	r24, 0x08	; 8
     a7a:	8c 93       	st	X, r24
	// 분주비 : 64; 16000000 / 64 => 2500000Hz (250KHz)
	// T = 1/f = 1/2500000Hz => 0.000004sec(= 4us)
	// 2500000Hz에서 256개의 펄스를 count하면 소요 시간 = 1.02ms
	//				 127개							  = 0.5ms
	// p.318 표 14-1
	TCCR3B |= 1 << CS31 | 1 << CS30;	// 분주비 : 64
     a7c:	80 81       	ld	r24, Z
     a7e:	83 60       	ori	r24, 0x03	; 3
     a80:	80 83       	st	Z, r24
	OCR3C = 0;	// OCR(Output Compare Register) : PWM 값
     a82:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a86:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     a8a:	08 95       	ret

00000a8c <init_L298N>:
//    1          0   : 정회전
//    0          1   : 역회전
//    1          1   : STOP
void init_L298N(void)
{
	DDRF |= 1 << 6 | 1 << 7;		// 출력 모드로 설정
     a8c:	e1 e6       	ldi	r30, 0x61	; 97
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	80 6c       	ori	r24, 0xC0	; 192
     a94:	80 83       	st	Z, r24
	PORTF &= ~(1 << 6 | 1 << 7);
     a96:	e2 e6       	ldi	r30, 0x62	; 98
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8f 73       	andi	r24, 0x3F	; 63
     a9e:	80 83       	st	Z, r24
	PORTF |= 1 << 6;				// 정회전
     aa0:	80 81       	ld	r24, Z
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	80 83       	st	Z, r24
	OCR3C = 0;					// 회전하는 상태로 시작
     aa6:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     aaa:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     aae:	08 95       	ret

00000ab0 <init_speaker>:
		OCR1A = 1136;
		_delay_ms(100);
		OCR1A = 0;
		_delay_ms(20);
	}
}
     ab0:	87 b3       	in	r24, 0x17	; 23
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	87 bb       	out	0x17, r24	; 23
     ab6:	80 e4       	ldi	r24, 0x40	; 64
     ab8:	8f bd       	out	0x2f, r24	; 47
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	8e bd       	out	0x2e, r24	; 46
     abe:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ac2:	1b bc       	out	0x2b, r1	; 43
     ac4:	1a bc       	out	0x2a, r1	; 42
     ac6:	08 95       	ret

00000ac8 <Beep>:
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	1a c0       	rjmp	.+52     	; 0xb02 <Beep+0x3a>
     ace:	44 ef       	ldi	r20, 0xF4	; 244
     ad0:	51 e0       	ldi	r21, 0x01	; 1
     ad2:	5b bd       	out	0x2b, r21	; 43
     ad4:	4a bd       	out	0x2a, r20	; 42
     ad6:	4f ef       	ldi	r20, 0xFF	; 255
     ad8:	53 ef       	ldi	r21, 0xF3	; 243
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	41 50       	subi	r20, 0x01	; 1
     ade:	50 40       	sbci	r21, 0x00	; 0
     ae0:	60 40       	sbci	r22, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <Beep+0x14>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <Beep+0x1e>
     ae6:	00 00       	nop
     ae8:	1b bc       	out	0x2b, r1	; 43
     aea:	1a bc       	out	0x2a, r1	; 42
     aec:	4f ef       	ldi	r20, 0xFF	; 255
     aee:	53 ef       	ldi	r21, 0xF3	; 243
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	41 50       	subi	r20, 0x01	; 1
     af4:	50 40       	sbci	r21, 0x00	; 0
     af6:	60 40       	sbci	r22, 0x00	; 0
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <Beep+0x2a>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <Beep+0x34>
     afc:	00 00       	nop
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	1c f3       	brlt	.-58     	; 0xace <Beep+0x6>
     b08:	08 95       	ret

00000b0a <delay_ms>:

void delay_ms(int ms)
{
	while(ms-- != 0)_delay_ms(1);
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <delay_ms+0x10>
     b0c:	8f e9       	ldi	r24, 0x9F	; 159
     b0e:	9f e0       	ldi	r25, 0x0F	; 15
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <delay_ms+0x6>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <delay_ms+0xc>
     b16:	00 00       	nop
     b18:	c9 01       	movw	r24, r18
     b1a:	9c 01       	movw	r18, r24
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	31 09       	sbc	r19, r1
     b20:	89 2b       	or	r24, r25
     b22:	a1 f7       	brne	.-24     	; 0xb0c <delay_ms+0x2>
     b24:	08 95       	ret

00000b26 <Music_Player>:
	BEAT_1_4, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_2, BEAT_1_4,
	BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4,
BEAT_1_4, BEAT_1_2, BEAT_1_2, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_2};

void Music_Player(int *tone, int *Beats)
{
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
     b30:	8b 01       	movw	r16, r22
	while(*tone != '/0')
     b32:	10 c0       	rjmp	.+32     	; 0xb54 <Music_Player+0x2e>
	{
		OCR1A = *tone;
     b34:	9b bd       	out	0x2b, r25	; 43
     b36:	8a bd       	out	0x2a, r24	; 42
		delay_ms(*Beats);
     b38:	f8 01       	movw	r30, r16
     b3a:	81 91       	ld	r24, Z+
     b3c:	91 91       	ld	r25, Z+
     b3e:	8f 01       	movw	r16, r30
     b40:	e4 df       	rcall	.-56     	; 0xb0a <delay_ms>
		tone++;
     b42:	22 96       	adiw	r28, 0x02	; 2
		Beats++;
		OCR1A = 0;
     b44:	1b bc       	out	0x2b, r1	; 43
     b46:	1a bc       	out	0x2a, r1	; 42
     b48:	8f e3       	ldi	r24, 0x3F	; 63
     b4a:	9c e9       	ldi	r25, 0x9C	; 156
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <Music_Player+0x26>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <Music_Player+0x2c>
     b52:	00 00       	nop
	BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4,
BEAT_1_4, BEAT_1_2, BEAT_1_2, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_2};

void Music_Player(int *tone, int *Beats)
{
	while(*tone != '/0')
     b54:	88 81       	ld	r24, Y
     b56:	99 81       	ldd	r25, Y+1	; 0x01
     b58:	80 33       	cpi	r24, 0x30	; 48
     b5a:	ef e2       	ldi	r30, 0x2F	; 47
     b5c:	9e 07       	cpc	r25, r30
     b5e:	51 f7       	brne	.-44     	; 0xb34 <Music_Player+0xe>
		Beats++;
		OCR1A = 0;
		_delay_ms(10);
	}
	return;
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <__vector_18>:
volatile char print_buffer[PRINT_BUFFER_SIZE];
volatile uint8_t print_flag = 0; // print_flag = 1이면 출력
void UART0_print_buffer(void);

ISR(USART0_RX_vect)
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	0b b6       	in	r0, 0x3b	; 59
     b76:	0f 92       	push	r0
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	1f 92       	push	r1
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
   volatile uint8_t rx_data;
   volatile static int i=0;
   
   rx_data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1byte를 읽어 들인다. 
     b9a:	8c b1       	in	r24, 0x0c	; 12
     b9c:	89 83       	std	Y+1, r24	; 0x01
                    // rx_data = UDR0;를 실행하면 UDR0의 내용이 빈다.(empty)
   if (rx_data == '\n')
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	8a 30       	cpi	r24, 0x0A	; 10
     ba2:	49 f5       	brne	.+82     	; 0xbf6 <__vector_18+0x8c>
   {
      rx_buff[rear++][i] = '\0';
     ba4:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <rear>
     ba8:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <rear+0x1>
     bac:	c9 01       	movw	r24, r18
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <rear+0x1>
     bb4:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <rear>
     bb8:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <i.1877>
     bbc:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <i.1877+0x1>
     bc0:	48 e2       	ldi	r20, 0x28	; 40
     bc2:	42 9f       	mul	r20, r18
     bc4:	f0 01       	movw	r30, r0
     bc6:	43 9f       	mul	r20, r19
     bc8:	f0 0d       	add	r31, r0
     bca:	11 24       	eor	r1, r1
     bcc:	ec 56       	subi	r30, 0x6C	; 108
     bce:	fd 4f       	sbci	r31, 0xFD	; 253
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25
     bd4:	10 82       	st	Z, r1
      rear %= COMMAND_NUMBER; // rear : 0 ~ 9
     bd6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <rear>
     bda:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <rear+0x1>
     bde:	6a e0       	ldi	r22, 0x0A	; 10
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	18 d3       	rcall	.+1584   	; 0x1214 <__divmodhi4>
     be4:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <rear+0x1>
     be8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <rear>
      i = 0; // 다음 string을 저장하기 위한 1차원 index값을 0으로
     bec:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <i.1877+0x1>
     bf0:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <i.1877>
     bf4:	1c c0       	rjmp	.+56     	; 0xc2e <__vector_18+0xc4>
      // !!!! rx_buff queue full check 하는 logic 추가 
   }
   else
   {
      rx_buff[rear][i++] = rx_data;
     bf6:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <rear>
     bfa:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <rear+0x1>
     bfe:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <i.1877>
     c02:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <i.1877+0x1>
     c06:	9c 01       	movw	r18, r24
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	30 93 8c 02 	sts	0x028C, r19	; 0x80028c <i.1877+0x1>
     c10:	20 93 8b 02 	sts	0x028B, r18	; 0x80028b <i.1877>
     c14:	49 81       	ldd	r20, Y+1	; 0x01
     c16:	58 e2       	ldi	r21, 0x28	; 40
     c18:	56 9f       	mul	r21, r22
     c1a:	90 01       	movw	r18, r0
     c1c:	57 9f       	mul	r21, r23
     c1e:	30 0d       	add	r19, r0
     c20:	11 24       	eor	r1, r1
     c22:	2c 56       	subi	r18, 0x6C	; 108
     c24:	3d 4f       	sbci	r19, 0xFD	; 253
     c26:	f9 01       	movw	r30, r18
     c28:	e8 0f       	add	r30, r24
     c2a:	f9 1f       	adc	r31, r25
     c2c:	40 83       	st	Z, r20
      // COMMAND_LENGTH를 check하는 logic 추가
   }
}
     c2e:	0f 90       	pop	r0
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0b be       	out	0x3b, r0	; 59
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <init_uart0>:
*/

void init_uart0(void)
{
   // 1. 9600bps로 설정
   UBRR0H = 0x00;
     c5a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
   UBRR0L = 207;  // 9600bps P219 표9-9
     c5e:	8f ec       	ldi	r24, 0xCF	; 207
     c60:	89 b9       	out	0x09, r24	; 9
   // 2. 2배속 통신  표9-1
   UCSR0A |= 1 << U2X0;  // 2배속 통신 
     c62:	8b b1       	in	r24, 0x0b	; 11
     c64:	82 60       	ori	r24, 0x02	; 2
     c66:	8b b9       	out	0x0b, r24	; 11
   UCSR0C |= 0x06;   // 비동기/data8bits/none parity
     c68:	e5 e9       	ldi	r30, 0x95	; 149
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	86 60       	ori	r24, 0x06	; 6
     c70:	80 83       	st	Z, r24
   // P215 표9-1
   // RXEN0 : UART0로 부터 수신이 가능 하도록 
   // TXEN0 : UART0로 부터 송신이 가능 하도록 
   // RXCIE0 : UART0로 부터 1byte가 들어오면(stop bit가 들어 오면)) rx interrupt를 발생 시켜라
   UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     c72:	8a b1       	in	r24, 0x0a	; 10
     c74:	88 69       	ori	r24, 0x98	; 152
     c76:	8a b9       	out	0x0a, r24	; 10
     c78:	08 95       	ret

00000c7a <UART0_transmit>:

// UART0로 1byte를 전송 하는 함수 (polling방식)
void UART0_transmit(uint8_t data)
{
   // 데이터 전송 중이면 전송이 끝날떄 까지 기다린다. 
   while ( !(UCSR0A & 1 << UDRE0))
     c7a:	5d 9b       	sbis	0x0b, 5	; 11
     c7c:	fe cf       	rjmp	.-4      	; 0xc7a <UART0_transmit>
      ;   // no operation
   UDR0 = data;  // data를 H/W전송 register에 쏜다. 
     c7e:	8c b9       	out	0x0c, r24	; 12
     c80:	08 95       	ret

00000c82 <UART0_print_buffer>:
}

// printf 출력 및 초기화
void UART0_print_buffer(void)
{
	if (print_flag) {
     c82:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <print_flag>
     c86:	88 23       	and	r24, r24
     c88:	79 f0       	breq	.+30     	; 0xca8 <UART0_print_buffer+0x26>
		printf("%s", print_buffer);
     c8a:	84 e2       	ldi	r24, 0x24	; 36
     c8c:	94 e0       	ldi	r25, 0x04	; 4
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	80 ef       	ldi	r24, 0xF0	; 240
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	1c d3       	rcall	.+1592   	; 0x12d4 <printf>
		print_flag = 0;
     c9c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <print_flag>
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	08 95       	ret

00000caa <pc_command_processing>:
	}
}

void pc_command_processing(void)
{
     caa:	cf 93       	push	r28
	if (front != rear) {
     cac:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <front>
     cb0:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <front+0x1>
     cb4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <rear>
     cb8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <rear+0x1>
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <pc_command_processing+0x1a>
     cc2:	c0 c0       	rjmp	.+384    	; 0xe44 <pc_command_processing+0x19a>
		snprintf(print_buffer, PRINT_BUFFER_SIZE, "Received command: %s\n", rx_buff[front]);
     cc4:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <front>
     cc8:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <front+0x1>
     ccc:	c8 e2       	ldi	r28, 0x28	; 40
     cce:	c2 9f       	mul	r28, r18
     cd0:	c0 01       	movw	r24, r0
     cd2:	c3 9f       	mul	r28, r19
     cd4:	90 0d       	add	r25, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	8c 56       	subi	r24, 0x6C	; 108
     cda:	9d 4f       	sbci	r25, 0xFD	; 253
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	83 ef       	ldi	r24, 0xF3	; 243
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	1f 92       	push	r1
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	8f 93       	push	r24
     cee:	84 e2       	ldi	r24, 0x24	; 36
     cf0:	94 e0       	ldi	r25, 0x04	; 4
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	01 d3       	rcall	.+1538   	; 0x12fa <snprintf>
		print_flag = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <print_flag>

		if (strncmp(rx_buff[front], "start", 5) == 0) {
     cfe:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <front>
     d02:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <front+0x1>
     d06:	c2 9f       	mul	r28, r18
     d08:	c0 01       	movw	r24, r0
     d0a:	c3 9f       	mul	r28, r19
     d0c:	90 0d       	add	r25, r0
     d0e:	11 24       	eor	r1, r1
     d10:	45 e0       	ldi	r20, 0x05	; 5
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	69 e0       	ldi	r22, 0x09	; 9
     d16:	72 e0       	ldi	r23, 0x02	; 2
     d18:	8c 56       	subi	r24, 0x6C	; 108
     d1a:	9d 4f       	sbci	r25, 0xFD	; 253
     d1c:	cd d2       	rcall	.+1434   	; 0x12b8 <strncmp>
     d1e:	2d b7       	in	r18, 0x3d	; 61
     d20:	3e b7       	in	r19, 0x3e	; 62
     d22:	28 5f       	subi	r18, 0xF8	; 248
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	3e bf       	out	0x3e, r19	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	2d bf       	out	0x3d, r18	; 61
     d30:	89 2b       	or	r24, r25
     d32:	09 f0       	breq	.+2      	; 0xd36 <pc_command_processing+0x8c>
			motor_on(); 
     d34:	43 c0       	rjmp	.+134    	; 0xdbc <pc_command_processing+0x112>
     d36:	0c dc       	rcall	.-2024   	; 0x550 <motor_on>
			if (seconds == 0) {
     d38:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     d3c:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     d40:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     d44:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     d48:	89 2b       	or	r24, r25
     d4a:	8a 2b       	or	r24, r26
     d4c:	8b 2b       	or	r24, r27
     d4e:	81 f4       	brne	.+32     	; 0xd70 <pc_command_processing+0xc6>
				seconds = wash_times[0];
     d50:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <wash_times>
     d54:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <wash_times+0x1>
     d58:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <wash_times+0x2>
     d5c:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <wash_times+0x3>
     d60:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <seconds>
     d64:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <seconds+0x1>
     d68:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <seconds+0x2>
     d6c:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <seconds+0x3>
			}

			motor_on();
     d70:	ef db       	rcall	.-2082   	; 0x550 <motor_on>

			snprintf(print_buffer, PRINT_BUFFER_SIZE, "<Washing resumed> time = %d sec\n", seconds);
     d72:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     d76:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     d7a:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     d7e:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     d82:	bf 93       	push	r27
     d84:	af 93       	push	r26
     d86:	9f 93       	push	r25
     d88:	8f 93       	push	r24
     d8a:	8f e0       	ldi	r24, 0x0F	; 15
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	9f 93       	push	r25
     d90:	8f 93       	push	r24
     d92:	1f 92       	push	r1
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	8f 93       	push	r24
     d98:	84 e2       	ldi	r24, 0x24	; 36
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
			
			print_flag = 1;
     da0:	ac d2       	rcall	.+1368   	; 0x12fa <snprintf>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <print_flag>
			UART0_print_buffer();  
     da8:	6c df       	rcall	.-296    	; 0xc82 <UART0_print_buffer>
     daa:	8d b7       	in	r24, 0x3d	; 61
     dac:	9e b7       	in	r25, 0x3e	; 62
     dae:	0a 96       	adiw	r24, 0x0a	; 10
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	9e bf       	out	0x3e, r25	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	8d bf       	out	0x3d, r24	; 61
     dba:	38 c0       	rjmp	.+112    	; 0xe2c <pc_command_processing+0x182>
		}

		else if (strncmp(rx_buff[front], "stop", 4) == 0) {
     dbc:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <front>
     dc0:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <front+0x1>
     dc4:	48 e2       	ldi	r20, 0x28	; 40
     dc6:	42 9f       	mul	r20, r18
     dc8:	c0 01       	movw	r24, r0
     dca:	43 9f       	mul	r20, r19
     dcc:	90 0d       	add	r25, r0
     dce:	11 24       	eor	r1, r1
     dd0:	44 e0       	ldi	r20, 0x04	; 4
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	60 e3       	ldi	r22, 0x30	; 48
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	8c 56       	subi	r24, 0x6C	; 108
     dda:	9d 4f       	sbci	r25, 0xFD	; 253
     ddc:	6d d2       	rcall	.+1242   	; 0x12b8 <strncmp>
     dde:	89 2b       	or	r24, r25
			motor_down();
     de0:	29 f5       	brne	.+74     	; 0xe2c <pc_command_processing+0x182>
     de2:	c4 db       	rcall	.-2168   	; 0x56c <motor_down>

			snprintf(print_buffer, PRINT_BUFFER_SIZE, "<Washing paused> time remaining: %d sec\n", seconds);
     de4:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <seconds>
     de8:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <seconds+0x1>
     dec:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <seconds+0x2>
     df0:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <seconds+0x3>
     df4:	bf 93       	push	r27
     df6:	af 93       	push	r26
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	85 e3       	ldi	r24, 0x35	; 53
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	1f 92       	push	r1
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	8f 93       	push	r24
     e0a:	84 e2       	ldi	r24, 0x24	; 36
     e0c:	94 e0       	ldi	r25, 0x04	; 4
     e0e:	9f 93       	push	r25
     e10:	8f 93       	push	r24
     e12:	73 d2       	rcall	.+1254   	; 0x12fa <snprintf>
			print_flag = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <print_flag>
     e1a:	2d b7       	in	r18, 0x3d	; 61
     e1c:	3e b7       	in	r19, 0x3e	; 62
     e1e:	26 5f       	subi	r18, 0xF6	; 246
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	3e bf       	out	0x3e, r19	; 62
     e28:	0f be       	out	0x3f, r0	; 63
		}

		front = (front + 1) % COMMAND_NUMBER;
     e2a:	2d bf       	out	0x3d, r18	; 61
     e2c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <front>
     e30:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <front+0x1>
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	6a e0       	ldi	r22, 0x0A	; 10
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	ec d1       	rcall	.+984    	; 0x1214 <__divmodhi4>
     e3c:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <front+0x1>
     e40:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <front>
	}
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <__vector_5>:

//P278 표 12-3
// PE4 : 외부 INT4 초음파 센서의 상승, 하강 엣지 둘다 INT가 ISR(INT4_vect)로 들어 온다.
// 결국 2번(상승: 1, 하강: 1) 들어 온다.
ISR(INT4_vect)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	0b b6       	in	r0, 0x3b	; 59
     e54:	0f 92       	push	r0
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
	// 1 상승에지
	if(ECHO_PIN & 1 << ECHO)
     e6e:	0c 9b       	sbis	0x01, 4	; 1
     e70:	03 c0       	rjmp	.+6      	; 0xe78 <__vector_5+0x30>
	{
		TCNT1 = 0;
     e72:	1d bc       	out	0x2d, r1	; 45
     e74:	1c bc       	out	0x2c, r1	; 44
     e76:	31 c0       	rjmp	.+98     	; 0xeda <__vector_5+0x92>
	}
	else // 2 하강에지
	{
		// ECHO핀에 들어온 펄스 갯수를 us 환산
		ultrasonic_dis = 1000000.0 * TCNT1 * 1024 / F_CPU;
     e78:	6c b5       	in	r22, 0x2c	; 44
     e7a:	7d b5       	in	r23, 0x2d	; 45
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	d8 d0       	rcall	.+432    	; 0x1032 <__floatunsisf>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	34 e2       	ldi	r19, 0x24	; 36
     e86:	44 e7       	ldi	r20, 0x74	; 116
     e88:	59 e4       	ldi	r21, 0x49	; 73
     e8a:	61 d1       	rcall	.+706    	; 0x114e <__mulsf3>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	5c d1       	rcall	.+696    	; 0x114e <__mulsf3>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	34 e2       	ldi	r19, 0x24	; 36
     e9a:	44 e7       	ldi	r20, 0x74	; 116
     e9c:	5b e4       	ldi	r21, 0x4B	; 75
     e9e:	30 d0       	rcall	.+96     	; 0xf00 <__divsf3>
     ea0:	97 d0       	rcall	.+302    	; 0xfd0 <__fixsfsi>
     ea2:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <ultrasonic_dis+0x1>
     ea6:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <ultrasonic_dis>
		// 예) TCINT에 10이 들어 있다고 가정 하자
		// 15.625KHZ의 주기 64us이다.
		// 0.000064sec(64us) * 10 = 0.00064sec(64us)
		// 640us / 58us(1cm이동 하는데 소요 시간) ==> 11cm이다.
		// --- 1cm : 58us
		sprintf(scm, "dis: %dcm\n", ultrasonic_dis / 58); // cm환산
     eaa:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <ultrasonic_dis>
     eae:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <ultrasonic_dis+0x1>
     eb2:	6a e3       	ldi	r22, 0x3A	; 58
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	ae d1       	rcall	.+860    	; 0x1214 <__divmodhi4>
     eb8:	7f 93       	push	r23
     eba:	6f 93       	push	r22
     ebc:	8e e5       	ldi	r24, 0x5E	; 94
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	84 ea       	ldi	r24, 0xA4	; 164
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	52 d2       	rcall	.+1188   	; 0x1372 <sprintf>
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
	}
	
	// 2 하강에지
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0b be       	out	0x3b, r0	; 59
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__divsf3>:
     f00:	0c d0       	rcall	.+24     	; 0xf1a <__divsf3x>
     f02:	eb c0       	rjmp	.+470    	; 0x10da <__fp_round>
     f04:	e3 d0       	rcall	.+454    	; 0x10cc <__fp_pscB>
     f06:	40 f0       	brcs	.+16     	; 0xf18 <__divsf3+0x18>
     f08:	da d0       	rcall	.+436    	; 0x10be <__fp_pscA>
     f0a:	30 f0       	brcs	.+12     	; 0xf18 <__divsf3+0x18>
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__divsf3+0x16>
     f0e:	5f 3f       	cpi	r21, 0xFF	; 255
     f10:	19 f0       	breq	.+6      	; 0xf18 <__divsf3+0x18>
     f12:	cc c0       	rjmp	.+408    	; 0x10ac <__fp_inf>
     f14:	51 11       	cpse	r21, r1
     f16:	15 c1       	rjmp	.+554    	; 0x1142 <__fp_szero>
     f18:	cf c0       	rjmp	.+414    	; 0x10b8 <__fp_nan>

00000f1a <__divsf3x>:
     f1a:	f0 d0       	rcall	.+480    	; 0x10fc <__fp_split3>
     f1c:	98 f3       	brcs	.-26     	; 0xf04 <__divsf3+0x4>

00000f1e <__divsf3_pse>:
     f1e:	99 23       	and	r25, r25
     f20:	c9 f3       	breq	.-14     	; 0xf14 <__divsf3+0x14>
     f22:	55 23       	and	r21, r21
     f24:	b1 f3       	breq	.-20     	; 0xf12 <__divsf3+0x12>
     f26:	95 1b       	sub	r25, r21
     f28:	55 0b       	sbc	r21, r21
     f2a:	bb 27       	eor	r27, r27
     f2c:	aa 27       	eor	r26, r26
     f2e:	62 17       	cp	r22, r18
     f30:	73 07       	cpc	r23, r19
     f32:	84 07       	cpc	r24, r20
     f34:	38 f0       	brcs	.+14     	; 0xf44 <__divsf3_pse+0x26>
     f36:	9f 5f       	subi	r25, 0xFF	; 255
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	44 1f       	adc	r20, r20
     f40:	aa 1f       	adc	r26, r26
     f42:	a9 f3       	breq	.-22     	; 0xf2e <__divsf3_pse+0x10>
     f44:	33 d0       	rcall	.+102    	; 0xfac <__divsf3_pse+0x8e>
     f46:	0e 2e       	mov	r0, r30
     f48:	3a f0       	brmi	.+14     	; 0xf58 <__divsf3_pse+0x3a>
     f4a:	e0 e8       	ldi	r30, 0x80	; 128
     f4c:	30 d0       	rcall	.+96     	; 0xfae <__divsf3_pse+0x90>
     f4e:	91 50       	subi	r25, 0x01	; 1
     f50:	50 40       	sbci	r21, 0x00	; 0
     f52:	e6 95       	lsr	r30
     f54:	00 1c       	adc	r0, r0
     f56:	ca f7       	brpl	.-14     	; 0xf4a <__divsf3_pse+0x2c>
     f58:	29 d0       	rcall	.+82     	; 0xfac <__divsf3_pse+0x8e>
     f5a:	fe 2f       	mov	r31, r30
     f5c:	27 d0       	rcall	.+78     	; 0xfac <__divsf3_pse+0x8e>
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	bb 1f       	adc	r27, r27
     f66:	26 17       	cp	r18, r22
     f68:	37 07       	cpc	r19, r23
     f6a:	48 07       	cpc	r20, r24
     f6c:	ab 07       	cpc	r26, r27
     f6e:	b0 e8       	ldi	r27, 0x80	; 128
     f70:	09 f0       	breq	.+2      	; 0xf74 <__divsf3_pse+0x56>
     f72:	bb 0b       	sbc	r27, r27
     f74:	80 2d       	mov	r24, r0
     f76:	bf 01       	movw	r22, r30
     f78:	ff 27       	eor	r31, r31
     f7a:	93 58       	subi	r25, 0x83	; 131
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	2a f0       	brmi	.+10     	; 0xf8a <__divsf3_pse+0x6c>
     f80:	9e 3f       	cpi	r25, 0xFE	; 254
     f82:	51 05       	cpc	r21, r1
     f84:	68 f0       	brcs	.+26     	; 0xfa0 <__divsf3_pse+0x82>
     f86:	92 c0       	rjmp	.+292    	; 0x10ac <__fp_inf>
     f88:	dc c0       	rjmp	.+440    	; 0x1142 <__fp_szero>
     f8a:	5f 3f       	cpi	r21, 0xFF	; 255
     f8c:	ec f3       	brlt	.-6      	; 0xf88 <__divsf3_pse+0x6a>
     f8e:	98 3e       	cpi	r25, 0xE8	; 232
     f90:	dc f3       	brlt	.-10     	; 0xf88 <__divsf3_pse+0x6a>
     f92:	86 95       	lsr	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f7 95       	ror	r31
     f9c:	9f 5f       	subi	r25, 0xFF	; 255
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__divsf3_pse+0x74>
     fa0:	88 0f       	add	r24, r24
     fa2:	91 1d       	adc	r25, r1
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret
     fac:	e1 e0       	ldi	r30, 0x01	; 1
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	bb 1f       	adc	r27, r27
     fb6:	62 17       	cp	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	ba 07       	cpc	r27, r26
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__divsf3_pse+0xaa>
     fc0:	62 1b       	sub	r22, r18
     fc2:	73 0b       	sbc	r23, r19
     fc4:	84 0b       	sbc	r24, r20
     fc6:	ba 0b       	sbc	r27, r26
     fc8:	ee 1f       	adc	r30, r30
     fca:	88 f7       	brcc	.-30     	; 0xfae <__divsf3_pse+0x90>
     fcc:	e0 95       	com	r30
     fce:	08 95       	ret

00000fd0 <__fixsfsi>:
     fd0:	04 d0       	rcall	.+8      	; 0xfda <__fixunssfsi>
     fd2:	68 94       	set
     fd4:	b1 11       	cpse	r27, r1
     fd6:	b5 c0       	rjmp	.+362    	; 0x1142 <__fp_szero>
     fd8:	08 95       	ret

00000fda <__fixunssfsi>:
     fda:	98 d0       	rcall	.+304    	; 0x110c <__fp_splitA>
     fdc:	88 f0       	brcs	.+34     	; 0x1000 <__DATA_REGION_LENGTH__>
     fde:	9f 57       	subi	r25, 0x7F	; 127
     fe0:	90 f0       	brcs	.+36     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fe2:	b9 2f       	mov	r27, r25
     fe4:	99 27       	eor	r25, r25
     fe6:	b7 51       	subi	r27, 0x17	; 23
     fe8:	a0 f0       	brcs	.+40     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
     fea:	d1 f0       	breq	.+52     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	1a f0       	brmi	.+6      	; 0xffc <__fixunssfsi+0x22>
     ff6:	ba 95       	dec	r27
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__fixunssfsi+0x12>
     ffa:	12 c0       	rjmp	.+36     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
     ffc:	b1 30       	cpi	r27, 0x01	; 1
     ffe:	81 f0       	breq	.+32     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1000:	9f d0       	rcall	.+318    	; 0x1140 <__fp_zero>
    1002:	b1 e0       	ldi	r27, 0x01	; 1
    1004:	08 95       	ret
    1006:	9c c0       	rjmp	.+312    	; 0x1140 <__fp_zero>
    1008:	67 2f       	mov	r22, r23
    100a:	78 2f       	mov	r23, r24
    100c:	88 27       	eor	r24, r24
    100e:	b8 5f       	subi	r27, 0xF8	; 248
    1010:	39 f0       	breq	.+14     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1012:	b9 3f       	cpi	r27, 0xF9	; 249
    1014:	cc f3       	brlt	.-14     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1016:	86 95       	lsr	r24
    1018:	77 95       	ror	r23
    101a:	67 95       	ror	r22
    101c:	b3 95       	inc	r27
    101e:	d9 f7       	brne	.-10     	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
    1020:	3e f4       	brtc	.+14     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1022:	90 95       	com	r25
    1024:	80 95       	com	r24
    1026:	70 95       	com	r23
    1028:	61 95       	neg	r22
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	08 95       	ret

00001032 <__floatunsisf>:
    1032:	e8 94       	clt
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <__floatsisf+0x12>

00001036 <__floatsisf>:
    1036:	97 fb       	bst	r25, 7
    1038:	3e f4       	brtc	.+14     	; 0x1048 <__floatsisf+0x12>
    103a:	90 95       	com	r25
    103c:	80 95       	com	r24
    103e:	70 95       	com	r23
    1040:	61 95       	neg	r22
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	8f 4f       	sbci	r24, 0xFF	; 255
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	99 23       	and	r25, r25
    104a:	a9 f0       	breq	.+42     	; 0x1076 <__floatsisf+0x40>
    104c:	f9 2f       	mov	r31, r25
    104e:	96 e9       	ldi	r25, 0x96	; 150
    1050:	bb 27       	eor	r27, r27
    1052:	93 95       	inc	r25
    1054:	f6 95       	lsr	r31
    1056:	87 95       	ror	r24
    1058:	77 95       	ror	r23
    105a:	67 95       	ror	r22
    105c:	b7 95       	ror	r27
    105e:	f1 11       	cpse	r31, r1
    1060:	f8 cf       	rjmp	.-16     	; 0x1052 <__floatsisf+0x1c>
    1062:	fa f4       	brpl	.+62     	; 0x10a2 <__floatsisf+0x6c>
    1064:	bb 0f       	add	r27, r27
    1066:	11 f4       	brne	.+4      	; 0x106c <__floatsisf+0x36>
    1068:	60 ff       	sbrs	r22, 0
    106a:	1b c0       	rjmp	.+54     	; 0x10a2 <__floatsisf+0x6c>
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	8f 4f       	sbci	r24, 0xFF	; 255
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	16 c0       	rjmp	.+44     	; 0x10a2 <__floatsisf+0x6c>
    1076:	88 23       	and	r24, r24
    1078:	11 f0       	breq	.+4      	; 0x107e <__floatsisf+0x48>
    107a:	96 e9       	ldi	r25, 0x96	; 150
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <__floatsisf+0x6a>
    107e:	77 23       	and	r23, r23
    1080:	21 f0       	breq	.+8      	; 0x108a <__floatsisf+0x54>
    1082:	9e e8       	ldi	r25, 0x8E	; 142
    1084:	87 2f       	mov	r24, r23
    1086:	76 2f       	mov	r23, r22
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <__floatsisf+0x5e>
    108a:	66 23       	and	r22, r22
    108c:	71 f0       	breq	.+28     	; 0x10aa <__floatsisf+0x74>
    108e:	96 e8       	ldi	r25, 0x86	; 134
    1090:	86 2f       	mov	r24, r22
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	2a f0       	brmi	.+10     	; 0x10a2 <__floatsisf+0x6c>
    1098:	9a 95       	dec	r25
    109a:	66 0f       	add	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	da f7       	brpl	.-10     	; 0x1098 <__floatsisf+0x62>
    10a2:	88 0f       	add	r24, r24
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret

000010ac <__fp_inf>:
    10ac:	97 f9       	bld	r25, 7
    10ae:	9f 67       	ori	r25, 0x7F	; 127
    10b0:	80 e8       	ldi	r24, 0x80	; 128
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	08 95       	ret

000010b8 <__fp_nan>:
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	80 ec       	ldi	r24, 0xC0	; 192
    10bc:	08 95       	ret

000010be <__fp_pscA>:
    10be:	00 24       	eor	r0, r0
    10c0:	0a 94       	dec	r0
    10c2:	16 16       	cp	r1, r22
    10c4:	17 06       	cpc	r1, r23
    10c6:	18 06       	cpc	r1, r24
    10c8:	09 06       	cpc	r0, r25
    10ca:	08 95       	ret

000010cc <__fp_pscB>:
    10cc:	00 24       	eor	r0, r0
    10ce:	0a 94       	dec	r0
    10d0:	12 16       	cp	r1, r18
    10d2:	13 06       	cpc	r1, r19
    10d4:	14 06       	cpc	r1, r20
    10d6:	05 06       	cpc	r0, r21
    10d8:	08 95       	ret

000010da <__fp_round>:
    10da:	09 2e       	mov	r0, r25
    10dc:	03 94       	inc	r0
    10de:	00 0c       	add	r0, r0
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <__fp_round+0xc>
    10e2:	88 23       	and	r24, r24
    10e4:	52 f0       	brmi	.+20     	; 0x10fa <__fp_round+0x20>
    10e6:	bb 0f       	add	r27, r27
    10e8:	40 f4       	brcc	.+16     	; 0x10fa <__fp_round+0x20>
    10ea:	bf 2b       	or	r27, r31
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0x18>
    10ee:	60 ff       	sbrs	r22, 0
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <__fp_round+0x20>
    10f2:	6f 5f       	subi	r22, 0xFF	; 255
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	8f 4f       	sbci	r24, 0xFF	; 255
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	08 95       	ret

000010fc <__fp_split3>:
    10fc:	57 fd       	sbrc	r21, 7
    10fe:	90 58       	subi	r25, 0x80	; 128
    1100:	44 0f       	add	r20, r20
    1102:	55 1f       	adc	r21, r21
    1104:	59 f0       	breq	.+22     	; 0x111c <__fp_splitA+0x10>
    1106:	5f 3f       	cpi	r21, 0xFF	; 255
    1108:	71 f0       	breq	.+28     	; 0x1126 <__fp_splitA+0x1a>
    110a:	47 95       	ror	r20

0000110c <__fp_splitA>:
    110c:	88 0f       	add	r24, r24
    110e:	97 fb       	bst	r25, 7
    1110:	99 1f       	adc	r25, r25
    1112:	61 f0       	breq	.+24     	; 0x112c <__fp_splitA+0x20>
    1114:	9f 3f       	cpi	r25, 0xFF	; 255
    1116:	79 f0       	breq	.+30     	; 0x1136 <__fp_splitA+0x2a>
    1118:	87 95       	ror	r24
    111a:	08 95       	ret
    111c:	12 16       	cp	r1, r18
    111e:	13 06       	cpc	r1, r19
    1120:	14 06       	cpc	r1, r20
    1122:	55 1f       	adc	r21, r21
    1124:	f2 cf       	rjmp	.-28     	; 0x110a <__stack+0xb>
    1126:	46 95       	lsr	r20
    1128:	f1 df       	rcall	.-30     	; 0x110c <__fp_splitA>
    112a:	08 c0       	rjmp	.+16     	; 0x113c <__fp_splitA+0x30>
    112c:	16 16       	cp	r1, r22
    112e:	17 06       	cpc	r1, r23
    1130:	18 06       	cpc	r1, r24
    1132:	99 1f       	adc	r25, r25
    1134:	f1 cf       	rjmp	.-30     	; 0x1118 <__fp_splitA+0xc>
    1136:	86 95       	lsr	r24
    1138:	71 05       	cpc	r23, r1
    113a:	61 05       	cpc	r22, r1
    113c:	08 94       	sec
    113e:	08 95       	ret

00001140 <__fp_zero>:
    1140:	e8 94       	clt

00001142 <__fp_szero>:
    1142:	bb 27       	eor	r27, r27
    1144:	66 27       	eor	r22, r22
    1146:	77 27       	eor	r23, r23
    1148:	cb 01       	movw	r24, r22
    114a:	97 f9       	bld	r25, 7
    114c:	08 95       	ret

0000114e <__mulsf3>:
    114e:	0b d0       	rcall	.+22     	; 0x1166 <__mulsf3x>
    1150:	c4 cf       	rjmp	.-120    	; 0x10da <__fp_round>
    1152:	b5 df       	rcall	.-150    	; 0x10be <__fp_pscA>
    1154:	28 f0       	brcs	.+10     	; 0x1160 <__mulsf3+0x12>
    1156:	ba df       	rcall	.-140    	; 0x10cc <__fp_pscB>
    1158:	18 f0       	brcs	.+6      	; 0x1160 <__mulsf3+0x12>
    115a:	95 23       	and	r25, r21
    115c:	09 f0       	breq	.+2      	; 0x1160 <__mulsf3+0x12>
    115e:	a6 cf       	rjmp	.-180    	; 0x10ac <__fp_inf>
    1160:	ab cf       	rjmp	.-170    	; 0x10b8 <__fp_nan>
    1162:	11 24       	eor	r1, r1
    1164:	ee cf       	rjmp	.-36     	; 0x1142 <__fp_szero>

00001166 <__mulsf3x>:
    1166:	ca df       	rcall	.-108    	; 0x10fc <__fp_split3>
    1168:	a0 f3       	brcs	.-24     	; 0x1152 <__mulsf3+0x4>

0000116a <__mulsf3_pse>:
    116a:	95 9f       	mul	r25, r21
    116c:	d1 f3       	breq	.-12     	; 0x1162 <__mulsf3+0x14>
    116e:	95 0f       	add	r25, r21
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	55 1f       	adc	r21, r21
    1174:	62 9f       	mul	r22, r18
    1176:	f0 01       	movw	r30, r0
    1178:	72 9f       	mul	r23, r18
    117a:	bb 27       	eor	r27, r27
    117c:	f0 0d       	add	r31, r0
    117e:	b1 1d       	adc	r27, r1
    1180:	63 9f       	mul	r22, r19
    1182:	aa 27       	eor	r26, r26
    1184:	f0 0d       	add	r31, r0
    1186:	b1 1d       	adc	r27, r1
    1188:	aa 1f       	adc	r26, r26
    118a:	64 9f       	mul	r22, r20
    118c:	66 27       	eor	r22, r22
    118e:	b0 0d       	add	r27, r0
    1190:	a1 1d       	adc	r26, r1
    1192:	66 1f       	adc	r22, r22
    1194:	82 9f       	mul	r24, r18
    1196:	22 27       	eor	r18, r18
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	62 1f       	adc	r22, r18
    119e:	73 9f       	mul	r23, r19
    11a0:	b0 0d       	add	r27, r0
    11a2:	a1 1d       	adc	r26, r1
    11a4:	62 1f       	adc	r22, r18
    11a6:	83 9f       	mul	r24, r19
    11a8:	a0 0d       	add	r26, r0
    11aa:	61 1d       	adc	r22, r1
    11ac:	22 1f       	adc	r18, r18
    11ae:	74 9f       	mul	r23, r20
    11b0:	33 27       	eor	r19, r19
    11b2:	a0 0d       	add	r26, r0
    11b4:	61 1d       	adc	r22, r1
    11b6:	23 1f       	adc	r18, r19
    11b8:	84 9f       	mul	r24, r20
    11ba:	60 0d       	add	r22, r0
    11bc:	21 1d       	adc	r18, r1
    11be:	82 2f       	mov	r24, r18
    11c0:	76 2f       	mov	r23, r22
    11c2:	6a 2f       	mov	r22, r26
    11c4:	11 24       	eor	r1, r1
    11c6:	9f 57       	subi	r25, 0x7F	; 127
    11c8:	50 40       	sbci	r21, 0x00	; 0
    11ca:	8a f0       	brmi	.+34     	; 0x11ee <__mulsf3_pse+0x84>
    11cc:	e1 f0       	breq	.+56     	; 0x1206 <__mulsf3_pse+0x9c>
    11ce:	88 23       	and	r24, r24
    11d0:	4a f0       	brmi	.+18     	; 0x11e4 <__mulsf3_pse+0x7a>
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	bb 1f       	adc	r27, r27
    11d8:	66 1f       	adc	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	a9 f7       	brne	.-22     	; 0x11ce <__mulsf3_pse+0x64>
    11e4:	9e 3f       	cpi	r25, 0xFE	; 254
    11e6:	51 05       	cpc	r21, r1
    11e8:	70 f0       	brcs	.+28     	; 0x1206 <__mulsf3_pse+0x9c>
    11ea:	60 cf       	rjmp	.-320    	; 0x10ac <__fp_inf>
    11ec:	aa cf       	rjmp	.-172    	; 0x1142 <__fp_szero>
    11ee:	5f 3f       	cpi	r21, 0xFF	; 255
    11f0:	ec f3       	brlt	.-6      	; 0x11ec <__mulsf3_pse+0x82>
    11f2:	98 3e       	cpi	r25, 0xE8	; 232
    11f4:	dc f3       	brlt	.-10     	; 0x11ec <__mulsf3_pse+0x82>
    11f6:	86 95       	lsr	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f7 95       	ror	r31
    1200:	e7 95       	ror	r30
    1202:	9f 5f       	subi	r25, 0xFF	; 255
    1204:	c1 f7       	brne	.-16     	; 0x11f6 <__mulsf3_pse+0x8c>
    1206:	fe 2b       	or	r31, r30
    1208:	88 0f       	add	r24, r24
    120a:	91 1d       	adc	r25, r1
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	97 f9       	bld	r25, 7
    1212:	08 95       	ret

00001214 <__divmodhi4>:
    1214:	97 fb       	bst	r25, 7
    1216:	07 2e       	mov	r0, r23
    1218:	16 f4       	brtc	.+4      	; 0x121e <__divmodhi4+0xa>
    121a:	00 94       	com	r0
    121c:	06 d0       	rcall	.+12     	; 0x122a <__divmodhi4_neg1>
    121e:	77 fd       	sbrc	r23, 7
    1220:	08 d0       	rcall	.+16     	; 0x1232 <__divmodhi4_neg2>
    1222:	36 d0       	rcall	.+108    	; 0x1290 <__udivmodhi4>
    1224:	07 fc       	sbrc	r0, 7
    1226:	05 d0       	rcall	.+10     	; 0x1232 <__divmodhi4_neg2>
    1228:	3e f4       	brtc	.+14     	; 0x1238 <__divmodhi4_exit>

0000122a <__divmodhi4_neg1>:
    122a:	90 95       	com	r25
    122c:	81 95       	neg	r24
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	08 95       	ret

00001232 <__divmodhi4_neg2>:
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255

00001238 <__divmodhi4_exit>:
    1238:	08 95       	ret

0000123a <__udivmodsi4>:
    123a:	a1 e2       	ldi	r26, 0x21	; 33
    123c:	1a 2e       	mov	r1, r26
    123e:	aa 1b       	sub	r26, r26
    1240:	bb 1b       	sub	r27, r27
    1242:	fd 01       	movw	r30, r26
    1244:	0d c0       	rjmp	.+26     	; 0x1260 <__udivmodsi4_ep>

00001246 <__udivmodsi4_loop>:
    1246:	aa 1f       	adc	r26, r26
    1248:	bb 1f       	adc	r27, r27
    124a:	ee 1f       	adc	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	a2 17       	cp	r26, r18
    1250:	b3 07       	cpc	r27, r19
    1252:	e4 07       	cpc	r30, r20
    1254:	f5 07       	cpc	r31, r21
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__udivmodsi4_ep>
    1258:	a2 1b       	sub	r26, r18
    125a:	b3 0b       	sbc	r27, r19
    125c:	e4 0b       	sbc	r30, r20
    125e:	f5 0b       	sbc	r31, r21

00001260 <__udivmodsi4_ep>:
    1260:	66 1f       	adc	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	1a 94       	dec	r1
    126a:	69 f7       	brne	.-38     	; 0x1246 <__udivmodsi4_loop>
    126c:	60 95       	com	r22
    126e:	70 95       	com	r23
    1270:	80 95       	com	r24
    1272:	90 95       	com	r25
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	bd 01       	movw	r22, r26
    127a:	cf 01       	movw	r24, r30
    127c:	08 95       	ret

0000127e <__tablejump2__>:
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	00 24       	eor	r0, r0
    1284:	00 1c       	adc	r0, r0
    1286:	0b be       	out	0x3b, r0	; 59
    1288:	07 90       	elpm	r0, Z+
    128a:	f6 91       	elpm	r31, Z
    128c:	e0 2d       	mov	r30, r0
    128e:	09 94       	ijmp

00001290 <__udivmodhi4>:
    1290:	aa 1b       	sub	r26, r26
    1292:	bb 1b       	sub	r27, r27
    1294:	51 e1       	ldi	r21, 0x11	; 17
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <__udivmodhi4_ep>

00001298 <__udivmodhi4_loop>:
    1298:	aa 1f       	adc	r26, r26
    129a:	bb 1f       	adc	r27, r27
    129c:	a6 17       	cp	r26, r22
    129e:	b7 07       	cpc	r27, r23
    12a0:	10 f0       	brcs	.+4      	; 0x12a6 <__udivmodhi4_ep>
    12a2:	a6 1b       	sub	r26, r22
    12a4:	b7 0b       	sbc	r27, r23

000012a6 <__udivmodhi4_ep>:
    12a6:	88 1f       	adc	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	5a 95       	dec	r21
    12ac:	a9 f7       	brne	.-22     	; 0x1298 <__udivmodhi4_loop>
    12ae:	80 95       	com	r24
    12b0:	90 95       	com	r25
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	08 95       	ret

000012b8 <strncmp>:
    12b8:	fb 01       	movw	r30, r22
    12ba:	dc 01       	movw	r26, r24
    12bc:	41 50       	subi	r20, 0x01	; 1
    12be:	50 40       	sbci	r21, 0x00	; 0
    12c0:	30 f0       	brcs	.+12     	; 0x12ce <strncmp+0x16>
    12c2:	8d 91       	ld	r24, X+
    12c4:	01 90       	ld	r0, Z+
    12c6:	80 19       	sub	r24, r0
    12c8:	19 f4       	brne	.+6      	; 0x12d0 <strncmp+0x18>
    12ca:	00 20       	and	r0, r0
    12cc:	b9 f7       	brne	.-18     	; 0x12bc <strncmp+0x4>
    12ce:	88 1b       	sub	r24, r24
    12d0:	99 0b       	sbc	r25, r25
    12d2:	08 95       	ret

000012d4 <printf>:
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	ae 01       	movw	r20, r28
    12de:	4b 5f       	subi	r20, 0xFB	; 251
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	fa 01       	movw	r30, r20
    12e4:	61 91       	ld	r22, Z+
    12e6:	71 91       	ld	r23, Z+
    12e8:	af 01       	movw	r20, r30
    12ea:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <__iob+0x2>
    12ee:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <__iob+0x3>
    12f2:	6d d0       	rcall	.+218    	; 0x13ce <vfprintf>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <snprintf>:
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	2e 97       	sbiw	r28, 0x0e	; 14
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	0d 89       	ldd	r16, Y+21	; 0x15
    1314:	1e 89       	ldd	r17, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	26 e0       	ldi	r18, 0x06	; 6
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	1a 83       	std	Y+2, r17	; 0x02
    1320:	09 83       	std	Y+1, r16	; 0x01
    1322:	97 ff       	sbrs	r25, 7
    1324:	02 c0       	rjmp	.+4      	; 0x132a <snprintf+0x30>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e8       	ldi	r25, 0x80	; 128
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	ae 01       	movw	r20, r28
    1332:	45 5e       	subi	r20, 0xE5	; 229
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	69 8d       	ldd	r22, Y+25	; 0x19
    1338:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133a:	ce 01       	movw	r24, r28
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	47 d0       	rcall	.+142    	; 0x13ce <vfprintf>
    1340:	4d 81       	ldd	r20, Y+5	; 0x05
    1342:	5e 81       	ldd	r21, Y+6	; 0x06
    1344:	57 fd       	sbrc	r21, 7
    1346:	0a c0       	rjmp	.+20     	; 0x135c <snprintf+0x62>
    1348:	2f 81       	ldd	r18, Y+7	; 0x07
    134a:	38 85       	ldd	r19, Y+8	; 0x08
    134c:	42 17       	cp	r20, r18
    134e:	53 07       	cpc	r21, r19
    1350:	0c f4       	brge	.+2      	; 0x1354 <snprintf+0x5a>
    1352:	9a 01       	movw	r18, r20
    1354:	f8 01       	movw	r30, r16
    1356:	e2 0f       	add	r30, r18
    1358:	f3 1f       	adc	r31, r19
    135a:	10 82       	st	Z, r1
    135c:	2e 96       	adiw	r28, 0x0e	; 14
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <sprintf>:
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	2e 97       	sbiw	r28, 0x0e	; 14
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	0d 89       	ldd	r16, Y+21	; 0x15
    138c:	1e 89       	ldd	r17, Y+22	; 0x16
    138e:	86 e0       	ldi	r24, 0x06	; 6
    1390:	8c 83       	std	Y+4, r24	; 0x04
    1392:	1a 83       	std	Y+2, r17	; 0x02
    1394:	09 83       	std	Y+1, r16	; 0x01
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	9f e7       	ldi	r25, 0x7F	; 127
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	ae 01       	movw	r20, r28
    13a0:	47 5e       	subi	r20, 0xE7	; 231
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	6f 89       	ldd	r22, Y+23	; 0x17
    13a6:	78 8d       	ldd	r23, Y+24	; 0x18
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	10 d0       	rcall	.+32     	; 0x13ce <vfprintf>
    13ae:	ef 81       	ldd	r30, Y+7	; 0x07
    13b0:	f8 85       	ldd	r31, Y+8	; 0x08
    13b2:	e0 0f       	add	r30, r16
    13b4:	f1 1f       	adc	r31, r17
    13b6:	10 82       	st	Z, r1
    13b8:	2e 96       	adiw	r28, 0x0e	; 14
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	08 95       	ret

000013ce <vfprintf>:
    13ce:	2f 92       	push	r2
    13d0:	3f 92       	push	r3
    13d2:	4f 92       	push	r4
    13d4:	5f 92       	push	r5
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	2b 97       	sbiw	r28, 0x0b	; 11
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	6c 01       	movw	r12, r24
    1404:	7b 01       	movw	r14, r22
    1406:	8a 01       	movw	r16, r20
    1408:	fc 01       	movw	r30, r24
    140a:	17 82       	std	Z+7, r1	; 0x07
    140c:	16 82       	std	Z+6, r1	; 0x06
    140e:	83 81       	ldd	r24, Z+3	; 0x03
    1410:	81 ff       	sbrs	r24, 1
    1412:	bf c1       	rjmp	.+894    	; 0x1792 <vfprintf+0x3c4>
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	3c 01       	movw	r6, r24
    141a:	f6 01       	movw	r30, r12
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	f7 01       	movw	r30, r14
    1420:	93 fd       	sbrc	r25, 3
    1422:	85 91       	lpm	r24, Z+
    1424:	93 ff       	sbrs	r25, 3
    1426:	81 91       	ld	r24, Z+
    1428:	7f 01       	movw	r14, r30
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <vfprintf+0x62>
    142e:	ad c1       	rjmp	.+858    	; 0x178a <vfprintf+0x3bc>
    1430:	85 32       	cpi	r24, 0x25	; 37
    1432:	39 f4       	brne	.+14     	; 0x1442 <vfprintf+0x74>
    1434:	93 fd       	sbrc	r25, 3
    1436:	85 91       	lpm	r24, Z+
    1438:	93 ff       	sbrs	r25, 3
    143a:	81 91       	ld	r24, Z+
    143c:	7f 01       	movw	r14, r30
    143e:	85 32       	cpi	r24, 0x25	; 37
    1440:	21 f4       	brne	.+8      	; 0x144a <vfprintf+0x7c>
    1442:	b6 01       	movw	r22, r12
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	d6 d1       	rcall	.+940    	; 0x17f4 <fputc>
    1448:	e8 cf       	rjmp	.-48     	; 0x141a <vfprintf+0x4c>
    144a:	91 2c       	mov	r9, r1
    144c:	21 2c       	mov	r2, r1
    144e:	31 2c       	mov	r3, r1
    1450:	ff e1       	ldi	r31, 0x1F	; 31
    1452:	f3 15       	cp	r31, r3
    1454:	d8 f0       	brcs	.+54     	; 0x148c <vfprintf+0xbe>
    1456:	8b 32       	cpi	r24, 0x2B	; 43
    1458:	79 f0       	breq	.+30     	; 0x1478 <vfprintf+0xaa>
    145a:	38 f4       	brcc	.+14     	; 0x146a <vfprintf+0x9c>
    145c:	80 32       	cpi	r24, 0x20	; 32
    145e:	79 f0       	breq	.+30     	; 0x147e <vfprintf+0xb0>
    1460:	83 32       	cpi	r24, 0x23	; 35
    1462:	a1 f4       	brne	.+40     	; 0x148c <vfprintf+0xbe>
    1464:	23 2d       	mov	r18, r3
    1466:	20 61       	ori	r18, 0x10	; 16
    1468:	1d c0       	rjmp	.+58     	; 0x14a4 <vfprintf+0xd6>
    146a:	8d 32       	cpi	r24, 0x2D	; 45
    146c:	61 f0       	breq	.+24     	; 0x1486 <vfprintf+0xb8>
    146e:	80 33       	cpi	r24, 0x30	; 48
    1470:	69 f4       	brne	.+26     	; 0x148c <vfprintf+0xbe>
    1472:	23 2d       	mov	r18, r3
    1474:	21 60       	ori	r18, 0x01	; 1
    1476:	16 c0       	rjmp	.+44     	; 0x14a4 <vfprintf+0xd6>
    1478:	83 2d       	mov	r24, r3
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	38 2e       	mov	r3, r24
    147e:	e3 2d       	mov	r30, r3
    1480:	e4 60       	ori	r30, 0x04	; 4
    1482:	3e 2e       	mov	r3, r30
    1484:	2a c0       	rjmp	.+84     	; 0x14da <vfprintf+0x10c>
    1486:	f3 2d       	mov	r31, r3
    1488:	f8 60       	ori	r31, 0x08	; 8
    148a:	1d c0       	rjmp	.+58     	; 0x14c6 <vfprintf+0xf8>
    148c:	37 fc       	sbrc	r3, 7
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <vfprintf+0x11c>
    1490:	20 ed       	ldi	r18, 0xD0	; 208
    1492:	28 0f       	add	r18, r24
    1494:	2a 30       	cpi	r18, 0x0A	; 10
    1496:	40 f0       	brcs	.+16     	; 0x14a8 <vfprintf+0xda>
    1498:	8e 32       	cpi	r24, 0x2E	; 46
    149a:	b9 f4       	brne	.+46     	; 0x14ca <vfprintf+0xfc>
    149c:	36 fc       	sbrc	r3, 6
    149e:	75 c1       	rjmp	.+746    	; 0x178a <vfprintf+0x3bc>
    14a0:	23 2d       	mov	r18, r3
    14a2:	20 64       	ori	r18, 0x40	; 64
    14a4:	32 2e       	mov	r3, r18
    14a6:	19 c0       	rjmp	.+50     	; 0x14da <vfprintf+0x10c>
    14a8:	36 fe       	sbrs	r3, 6
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0xea>
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	98 9e       	mul	r9, r24
    14b0:	20 0d       	add	r18, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	92 2e       	mov	r9, r18
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <vfprintf+0x10c>
    14b8:	ea e0       	ldi	r30, 0x0A	; 10
    14ba:	2e 9e       	mul	r2, r30
    14bc:	20 0d       	add	r18, r0
    14be:	11 24       	eor	r1, r1
    14c0:	22 2e       	mov	r2, r18
    14c2:	f3 2d       	mov	r31, r3
    14c4:	f0 62       	ori	r31, 0x20	; 32
    14c6:	3f 2e       	mov	r3, r31
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <vfprintf+0x10c>
    14ca:	8c 36       	cpi	r24, 0x6C	; 108
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <vfprintf+0x108>
    14ce:	83 2d       	mov	r24, r3
    14d0:	80 68       	ori	r24, 0x80	; 128
    14d2:	38 2e       	mov	r3, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x10c>
    14d6:	88 36       	cpi	r24, 0x68	; 104
    14d8:	41 f4       	brne	.+16     	; 0x14ea <vfprintf+0x11c>
    14da:	f7 01       	movw	r30, r14
    14dc:	93 fd       	sbrc	r25, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	93 ff       	sbrs	r25, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	7f 01       	movw	r14, r30
    14e6:	81 11       	cpse	r24, r1
    14e8:	b3 cf       	rjmp	.-154    	; 0x1450 <vfprintf+0x82>
    14ea:	98 2f       	mov	r25, r24
    14ec:	9f 7d       	andi	r25, 0xDF	; 223
    14ee:	95 54       	subi	r25, 0x45	; 69
    14f0:	93 30       	cpi	r25, 0x03	; 3
    14f2:	28 f4       	brcc	.+10     	; 0x14fe <vfprintf+0x130>
    14f4:	0c 5f       	subi	r16, 0xFC	; 252
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	99 83       	std	Y+1, r25	; 0x01
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x14a>
    14fe:	83 36       	cpi	r24, 0x63	; 99
    1500:	31 f0       	breq	.+12     	; 0x150e <vfprintf+0x140>
    1502:	83 37       	cpi	r24, 0x73	; 115
    1504:	71 f0       	breq	.+28     	; 0x1522 <vfprintf+0x154>
    1506:	83 35       	cpi	r24, 0x53	; 83
    1508:	09 f0       	breq	.+2      	; 0x150c <vfprintf+0x13e>
    150a:	55 c0       	rjmp	.+170    	; 0x15b6 <vfprintf+0x1e8>
    150c:	20 c0       	rjmp	.+64     	; 0x154e <vfprintf+0x180>
    150e:	f8 01       	movw	r30, r16
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	0e 5f       	subi	r16, 0xFE	; 254
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	88 24       	eor	r8, r8
    151a:	83 94       	inc	r8
    151c:	91 2c       	mov	r9, r1
    151e:	53 01       	movw	r10, r6
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <vfprintf+0x178>
    1522:	28 01       	movw	r4, r16
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	4f 0e       	add	r4, r31
    1528:	51 1c       	adc	r5, r1
    152a:	f8 01       	movw	r30, r16
    152c:	a0 80       	ld	r10, Z
    152e:	b1 80       	ldd	r11, Z+1	; 0x01
    1530:	36 fe       	sbrs	r3, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x16c>
    1534:	69 2d       	mov	r22, r9
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x170>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c5 01       	movw	r24, r10
    1540:	4e d1       	rcall	.+668    	; 0x17de <strnlen>
    1542:	4c 01       	movw	r8, r24
    1544:	82 01       	movw	r16, r4
    1546:	f3 2d       	mov	r31, r3
    1548:	ff 77       	andi	r31, 0x7F	; 127
    154a:	3f 2e       	mov	r3, r31
    154c:	15 c0       	rjmp	.+42     	; 0x1578 <vfprintf+0x1aa>
    154e:	28 01       	movw	r4, r16
    1550:	22 e0       	ldi	r18, 0x02	; 2
    1552:	42 0e       	add	r4, r18
    1554:	51 1c       	adc	r5, r1
    1556:	f8 01       	movw	r30, r16
    1558:	a0 80       	ld	r10, Z
    155a:	b1 80       	ldd	r11, Z+1	; 0x01
    155c:	36 fe       	sbrs	r3, 6
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <vfprintf+0x198>
    1560:	69 2d       	mov	r22, r9
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <vfprintf+0x19c>
    1566:	6f ef       	ldi	r22, 0xFF	; 255
    1568:	7f ef       	ldi	r23, 0xFF	; 255
    156a:	c5 01       	movw	r24, r10
    156c:	2d d1       	rcall	.+602    	; 0x17c8 <strnlen_P>
    156e:	4c 01       	movw	r8, r24
    1570:	f3 2d       	mov	r31, r3
    1572:	f0 68       	ori	r31, 0x80	; 128
    1574:	3f 2e       	mov	r3, r31
    1576:	82 01       	movw	r16, r4
    1578:	33 fc       	sbrc	r3, 3
    157a:	19 c0       	rjmp	.+50     	; 0x15ae <vfprintf+0x1e0>
    157c:	82 2d       	mov	r24, r2
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	88 16       	cp	r8, r24
    1582:	99 06       	cpc	r9, r25
    1584:	a0 f4       	brcc	.+40     	; 0x15ae <vfprintf+0x1e0>
    1586:	b6 01       	movw	r22, r12
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	33 d1       	rcall	.+614    	; 0x17f4 <fputc>
    158e:	2a 94       	dec	r2
    1590:	f5 cf       	rjmp	.-22     	; 0x157c <vfprintf+0x1ae>
    1592:	f5 01       	movw	r30, r10
    1594:	37 fc       	sbrc	r3, 7
    1596:	85 91       	lpm	r24, Z+
    1598:	37 fe       	sbrs	r3, 7
    159a:	81 91       	ld	r24, Z+
    159c:	5f 01       	movw	r10, r30
    159e:	b6 01       	movw	r22, r12
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	28 d1       	rcall	.+592    	; 0x17f4 <fputc>
    15a4:	21 10       	cpse	r2, r1
    15a6:	2a 94       	dec	r2
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	82 1a       	sub	r8, r18
    15ac:	91 08       	sbc	r9, r1
    15ae:	81 14       	cp	r8, r1
    15b0:	91 04       	cpc	r9, r1
    15b2:	79 f7       	brne	.-34     	; 0x1592 <vfprintf+0x1c4>
    15b4:	e1 c0       	rjmp	.+450    	; 0x1778 <vfprintf+0x3aa>
    15b6:	84 36       	cpi	r24, 0x64	; 100
    15b8:	11 f0       	breq	.+4      	; 0x15be <vfprintf+0x1f0>
    15ba:	89 36       	cpi	r24, 0x69	; 105
    15bc:	39 f5       	brne	.+78     	; 0x160c <vfprintf+0x23e>
    15be:	f8 01       	movw	r30, r16
    15c0:	37 fe       	sbrs	r3, 7
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <vfprintf+0x204>
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	0c 5f       	subi	r16, 0xFC	; 252
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	08 c0       	rjmp	.+16     	; 0x15e2 <vfprintf+0x214>
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	07 2e       	mov	r0, r23
    15d8:	00 0c       	add	r0, r0
    15da:	88 0b       	sbc	r24, r24
    15dc:	99 0b       	sbc	r25, r25
    15de:	0e 5f       	subi	r16, 0xFE	; 254
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	f3 2d       	mov	r31, r3
    15e4:	ff 76       	andi	r31, 0x6F	; 111
    15e6:	3f 2e       	mov	r3, r31
    15e8:	97 ff       	sbrs	r25, 7
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <vfprintf+0x230>
    15ec:	90 95       	com	r25
    15ee:	80 95       	com	r24
    15f0:	70 95       	com	r23
    15f2:	61 95       	neg	r22
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8f 4f       	sbci	r24, 0xFF	; 255
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	f0 68       	ori	r31, 0x80	; 128
    15fc:	3f 2e       	mov	r3, r31
    15fe:	2a e0       	ldi	r18, 0x0A	; 10
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a3 01       	movw	r20, r6
    1604:	33 d1       	rcall	.+614    	; 0x186c <__ultoa_invert>
    1606:	88 2e       	mov	r8, r24
    1608:	86 18       	sub	r8, r6
    160a:	44 c0       	rjmp	.+136    	; 0x1694 <vfprintf+0x2c6>
    160c:	85 37       	cpi	r24, 0x75	; 117
    160e:	31 f4       	brne	.+12     	; 0x161c <vfprintf+0x24e>
    1610:	23 2d       	mov	r18, r3
    1612:	2f 7e       	andi	r18, 0xEF	; 239
    1614:	b2 2e       	mov	r11, r18
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	25 c0       	rjmp	.+74     	; 0x1666 <vfprintf+0x298>
    161c:	93 2d       	mov	r25, r3
    161e:	99 7f       	andi	r25, 0xF9	; 249
    1620:	b9 2e       	mov	r11, r25
    1622:	8f 36       	cpi	r24, 0x6F	; 111
    1624:	c1 f0       	breq	.+48     	; 0x1656 <vfprintf+0x288>
    1626:	18 f4       	brcc	.+6      	; 0x162e <vfprintf+0x260>
    1628:	88 35       	cpi	r24, 0x58	; 88
    162a:	79 f0       	breq	.+30     	; 0x164a <vfprintf+0x27c>
    162c:	ae c0       	rjmp	.+348    	; 0x178a <vfprintf+0x3bc>
    162e:	80 37       	cpi	r24, 0x70	; 112
    1630:	19 f0       	breq	.+6      	; 0x1638 <vfprintf+0x26a>
    1632:	88 37       	cpi	r24, 0x78	; 120
    1634:	21 f0       	breq	.+8      	; 0x163e <vfprintf+0x270>
    1636:	a9 c0       	rjmp	.+338    	; 0x178a <vfprintf+0x3bc>
    1638:	e9 2f       	mov	r30, r25
    163a:	e0 61       	ori	r30, 0x10	; 16
    163c:	be 2e       	mov	r11, r30
    163e:	b4 fe       	sbrs	r11, 4
    1640:	0d c0       	rjmp	.+26     	; 0x165c <vfprintf+0x28e>
    1642:	fb 2d       	mov	r31, r11
    1644:	f4 60       	ori	r31, 0x04	; 4
    1646:	bf 2e       	mov	r11, r31
    1648:	09 c0       	rjmp	.+18     	; 0x165c <vfprintf+0x28e>
    164a:	34 fe       	sbrs	r3, 4
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <vfprintf+0x294>
    164e:	29 2f       	mov	r18, r25
    1650:	26 60       	ori	r18, 0x06	; 6
    1652:	b2 2e       	mov	r11, r18
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x294>
    1656:	28 e0       	ldi	r18, 0x08	; 8
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <vfprintf+0x298>
    165c:	20 e1       	ldi	r18, 0x10	; 16
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <vfprintf+0x298>
    1662:	20 e1       	ldi	r18, 0x10	; 16
    1664:	32 e0       	ldi	r19, 0x02	; 2
    1666:	f8 01       	movw	r30, r16
    1668:	b7 fe       	sbrs	r11, 7
    166a:	07 c0       	rjmp	.+14     	; 0x167a <vfprintf+0x2ac>
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0c 5f       	subi	r16, 0xFC	; 252
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0x2b8>
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	a3 01       	movw	r20, r6
    1688:	f1 d0       	rcall	.+482    	; 0x186c <__ultoa_invert>
    168a:	88 2e       	mov	r8, r24
    168c:	86 18       	sub	r8, r6
    168e:	fb 2d       	mov	r31, r11
    1690:	ff 77       	andi	r31, 0x7F	; 127
    1692:	3f 2e       	mov	r3, r31
    1694:	36 fe       	sbrs	r3, 6
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <vfprintf+0x2e4>
    1698:	23 2d       	mov	r18, r3
    169a:	2e 7f       	andi	r18, 0xFE	; 254
    169c:	a2 2e       	mov	r10, r18
    169e:	89 14       	cp	r8, r9
    16a0:	58 f4       	brcc	.+22     	; 0x16b8 <vfprintf+0x2ea>
    16a2:	34 fe       	sbrs	r3, 4
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x2ee>
    16a6:	32 fc       	sbrc	r3, 2
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <vfprintf+0x2ee>
    16aa:	83 2d       	mov	r24, r3
    16ac:	8e 7e       	andi	r24, 0xEE	; 238
    16ae:	a8 2e       	mov	r10, r24
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <vfprintf+0x2ee>
    16b2:	b8 2c       	mov	r11, r8
    16b4:	a3 2c       	mov	r10, r3
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <vfprintf+0x2f0>
    16b8:	b8 2c       	mov	r11, r8
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <vfprintf+0x2f0>
    16bc:	b9 2c       	mov	r11, r9
    16be:	a4 fe       	sbrs	r10, 4
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <vfprintf+0x312>
    16c2:	fe 01       	movw	r30, r28
    16c4:	e8 0d       	add	r30, r8
    16c6:	f1 1d       	adc	r31, r1
    16c8:	80 81       	ld	r24, Z
    16ca:	80 33       	cpi	r24, 0x30	; 48
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <vfprintf+0x308>
    16ce:	9a 2d       	mov	r25, r10
    16d0:	99 7e       	andi	r25, 0xE9	; 233
    16d2:	a9 2e       	mov	r10, r25
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <vfprintf+0x31a>
    16d6:	a2 fe       	sbrs	r10, 2
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0x318>
    16da:	b3 94       	inc	r11
    16dc:	b3 94       	inc	r11
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <vfprintf+0x31a>
    16e0:	8a 2d       	mov	r24, r10
    16e2:	86 78       	andi	r24, 0x86	; 134
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <vfprintf+0x31a>
    16e6:	b3 94       	inc	r11
    16e8:	a3 fc       	sbrc	r10, 3
    16ea:	10 c0       	rjmp	.+32     	; 0x170c <vfprintf+0x33e>
    16ec:	a0 fe       	sbrs	r10, 0
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0x32e>
    16f0:	b2 14       	cp	r11, r2
    16f2:	80 f4       	brcc	.+32     	; 0x1714 <vfprintf+0x346>
    16f4:	28 0c       	add	r2, r8
    16f6:	92 2c       	mov	r9, r2
    16f8:	9b 18       	sub	r9, r11
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <vfprintf+0x348>
    16fc:	b2 14       	cp	r11, r2
    16fe:	58 f4       	brcc	.+22     	; 0x1716 <vfprintf+0x348>
    1700:	b6 01       	movw	r22, r12
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	76 d0       	rcall	.+236    	; 0x17f4 <fputc>
    1708:	b3 94       	inc	r11
    170a:	f8 cf       	rjmp	.-16     	; 0x16fc <vfprintf+0x32e>
    170c:	b2 14       	cp	r11, r2
    170e:	18 f4       	brcc	.+6      	; 0x1716 <vfprintf+0x348>
    1710:	2b 18       	sub	r2, r11
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x34a>
    1714:	98 2c       	mov	r9, r8
    1716:	21 2c       	mov	r2, r1
    1718:	a4 fe       	sbrs	r10, 4
    171a:	0f c0       	rjmp	.+30     	; 0x173a <vfprintf+0x36c>
    171c:	b6 01       	movw	r22, r12
    171e:	80 e3       	ldi	r24, 0x30	; 48
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	68 d0       	rcall	.+208    	; 0x17f4 <fputc>
    1724:	a2 fe       	sbrs	r10, 2
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <vfprintf+0x386>
    1728:	a1 fc       	sbrc	r10, 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <vfprintf+0x364>
    172c:	88 e7       	ldi	r24, 0x78	; 120
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x368>
    1732:	88 e5       	ldi	r24, 0x58	; 88
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	b6 01       	movw	r22, r12
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <vfprintf+0x384>
    173a:	8a 2d       	mov	r24, r10
    173c:	86 78       	andi	r24, 0x86	; 134
    173e:	51 f0       	breq	.+20     	; 0x1754 <vfprintf+0x386>
    1740:	a1 fe       	sbrs	r10, 1
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x37a>
    1744:	8b e2       	ldi	r24, 0x2B	; 43
    1746:	01 c0       	rjmp	.+2      	; 0x174a <vfprintf+0x37c>
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	a7 fc       	sbrc	r10, 7
    174c:	8d e2       	ldi	r24, 0x2D	; 45
    174e:	b6 01       	movw	r22, r12
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	50 d0       	rcall	.+160    	; 0x17f4 <fputc>
    1754:	89 14       	cp	r8, r9
    1756:	30 f4       	brcc	.+12     	; 0x1764 <vfprintf+0x396>
    1758:	b6 01       	movw	r22, r12
    175a:	80 e3       	ldi	r24, 0x30	; 48
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	4a d0       	rcall	.+148    	; 0x17f4 <fputc>
    1760:	9a 94       	dec	r9
    1762:	f8 cf       	rjmp	.-16     	; 0x1754 <vfprintf+0x386>
    1764:	8a 94       	dec	r8
    1766:	f3 01       	movw	r30, r6
    1768:	e8 0d       	add	r30, r8
    176a:	f1 1d       	adc	r31, r1
    176c:	80 81       	ld	r24, Z
    176e:	b6 01       	movw	r22, r12
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	40 d0       	rcall	.+128    	; 0x17f4 <fputc>
    1774:	81 10       	cpse	r8, r1
    1776:	f6 cf       	rjmp	.-20     	; 0x1764 <vfprintf+0x396>
    1778:	22 20       	and	r2, r2
    177a:	09 f4       	brne	.+2      	; 0x177e <vfprintf+0x3b0>
    177c:	4e ce       	rjmp	.-868    	; 0x141a <vfprintf+0x4c>
    177e:	b6 01       	movw	r22, r12
    1780:	80 e2       	ldi	r24, 0x20	; 32
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	37 d0       	rcall	.+110    	; 0x17f4 <fputc>
    1786:	2a 94       	dec	r2
    1788:	f7 cf       	rjmp	.-18     	; 0x1778 <vfprintf+0x3aa>
    178a:	f6 01       	movw	r30, r12
    178c:	86 81       	ldd	r24, Z+6	; 0x06
    178e:	97 81       	ldd	r25, Z+7	; 0x07
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x3c8>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	2b 96       	adiw	r28, 0x0b	; 11
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	7f 90       	pop	r7
    17bc:	6f 90       	pop	r6
    17be:	5f 90       	pop	r5
    17c0:	4f 90       	pop	r4
    17c2:	3f 90       	pop	r3
    17c4:	2f 90       	pop	r2
    17c6:	08 95       	ret

000017c8 <strnlen_P>:
    17c8:	fc 01       	movw	r30, r24
    17ca:	05 90       	lpm	r0, Z+
    17cc:	61 50       	subi	r22, 0x01	; 1
    17ce:	70 40       	sbci	r23, 0x00	; 0
    17d0:	01 10       	cpse	r0, r1
    17d2:	d8 f7       	brcc	.-10     	; 0x17ca <strnlen_P+0x2>
    17d4:	80 95       	com	r24
    17d6:	90 95       	com	r25
    17d8:	8e 0f       	add	r24, r30
    17da:	9f 1f       	adc	r25, r31
    17dc:	08 95       	ret

000017de <strnlen>:
    17de:	fc 01       	movw	r30, r24
    17e0:	61 50       	subi	r22, 0x01	; 1
    17e2:	70 40       	sbci	r23, 0x00	; 0
    17e4:	01 90       	ld	r0, Z+
    17e6:	01 10       	cpse	r0, r1
    17e8:	d8 f7       	brcc	.-10     	; 0x17e0 <strnlen+0x2>
    17ea:	80 95       	com	r24
    17ec:	90 95       	com	r25
    17ee:	8e 0f       	add	r24, r30
    17f0:	9f 1f       	adc	r25, r31
    17f2:	08 95       	ret

000017f4 <fputc>:
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	fb 01       	movw	r30, r22
    17fe:	23 81       	ldd	r18, Z+3	; 0x03
    1800:	21 fd       	sbrc	r18, 1
    1802:	03 c0       	rjmp	.+6      	; 0x180a <fputc+0x16>
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	9f ef       	ldi	r25, 0xFF	; 255
    1808:	2c c0       	rjmp	.+88     	; 0x1862 <fputc+0x6e>
    180a:	22 ff       	sbrs	r18, 2
    180c:	16 c0       	rjmp	.+44     	; 0x183a <fputc+0x46>
    180e:	46 81       	ldd	r20, Z+6	; 0x06
    1810:	57 81       	ldd	r21, Z+7	; 0x07
    1812:	24 81       	ldd	r18, Z+4	; 0x04
    1814:	35 81       	ldd	r19, Z+5	; 0x05
    1816:	42 17       	cp	r20, r18
    1818:	53 07       	cpc	r21, r19
    181a:	44 f4       	brge	.+16     	; 0x182c <fputc+0x38>
    181c:	a0 81       	ld	r26, Z
    181e:	b1 81       	ldd	r27, Z+1	; 0x01
    1820:	9d 01       	movw	r18, r26
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	31 83       	std	Z+1, r19	; 0x01
    1828:	20 83       	st	Z, r18
    182a:	8c 93       	st	X, r24
    182c:	26 81       	ldd	r18, Z+6	; 0x06
    182e:	37 81       	ldd	r19, Z+7	; 0x07
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	37 83       	std	Z+7, r19	; 0x07
    1836:	26 83       	std	Z+6, r18	; 0x06
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <fputc+0x6e>
    183a:	8b 01       	movw	r16, r22
    183c:	ec 01       	movw	r28, r24
    183e:	fb 01       	movw	r30, r22
    1840:	00 84       	ldd	r0, Z+8	; 0x08
    1842:	f1 85       	ldd	r31, Z+9	; 0x09
    1844:	e0 2d       	mov	r30, r0
    1846:	09 95       	icall
    1848:	89 2b       	or	r24, r25
    184a:	e1 f6       	brne	.-72     	; 0x1804 <fputc+0x10>
    184c:	d8 01       	movw	r26, r16
    184e:	16 96       	adiw	r26, 0x06	; 6
    1850:	8d 91       	ld	r24, X+
    1852:	9c 91       	ld	r25, X
    1854:	17 97       	sbiw	r26, 0x07	; 7
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	17 96       	adiw	r26, 0x07	; 7
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	16 97       	sbiw	r26, 0x06	; 6
    1860:	ce 01       	movw	r24, r28
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	08 95       	ret

0000186c <__ultoa_invert>:
    186c:	fa 01       	movw	r30, r20
    186e:	aa 27       	eor	r26, r26
    1870:	28 30       	cpi	r18, 0x08	; 8
    1872:	51 f1       	breq	.+84     	; 0x18c8 <__ultoa_invert+0x5c>
    1874:	20 31       	cpi	r18, 0x10	; 16
    1876:	81 f1       	breq	.+96     	; 0x18d8 <__ultoa_invert+0x6c>
    1878:	e8 94       	clt
    187a:	6f 93       	push	r22
    187c:	6e 7f       	andi	r22, 0xFE	; 254
    187e:	6e 5f       	subi	r22, 0xFE	; 254
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	8f 4f       	sbci	r24, 0xFF	; 255
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	af 4f       	sbci	r26, 0xFF	; 255
    1888:	b1 e0       	ldi	r27, 0x01	; 1
    188a:	3e d0       	rcall	.+124    	; 0x1908 <__ultoa_invert+0x9c>
    188c:	b4 e0       	ldi	r27, 0x04	; 4
    188e:	3c d0       	rcall	.+120    	; 0x1908 <__ultoa_invert+0x9c>
    1890:	67 0f       	add	r22, r23
    1892:	78 1f       	adc	r23, r24
    1894:	89 1f       	adc	r24, r25
    1896:	9a 1f       	adc	r25, r26
    1898:	a1 1d       	adc	r26, r1
    189a:	68 0f       	add	r22, r24
    189c:	79 1f       	adc	r23, r25
    189e:	8a 1f       	adc	r24, r26
    18a0:	91 1d       	adc	r25, r1
    18a2:	a1 1d       	adc	r26, r1
    18a4:	6a 0f       	add	r22, r26
    18a6:	71 1d       	adc	r23, r1
    18a8:	81 1d       	adc	r24, r1
    18aa:	91 1d       	adc	r25, r1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	20 d0       	rcall	.+64     	; 0x18f0 <__ultoa_invert+0x84>
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <__ultoa_invert+0x48>
    18b2:	68 94       	set
    18b4:	3f 91       	pop	r19
    18b6:	2a e0       	ldi	r18, 0x0A	; 10
    18b8:	26 9f       	mul	r18, r22
    18ba:	11 24       	eor	r1, r1
    18bc:	30 19       	sub	r19, r0
    18be:	30 5d       	subi	r19, 0xD0	; 208
    18c0:	31 93       	st	Z+, r19
    18c2:	de f6       	brtc	.-74     	; 0x187a <__ultoa_invert+0xe>
    18c4:	cf 01       	movw	r24, r30
    18c6:	08 95       	ret
    18c8:	46 2f       	mov	r20, r22
    18ca:	47 70       	andi	r20, 0x07	; 7
    18cc:	40 5d       	subi	r20, 0xD0	; 208
    18ce:	41 93       	st	Z+, r20
    18d0:	b3 e0       	ldi	r27, 0x03	; 3
    18d2:	0f d0       	rcall	.+30     	; 0x18f2 <__ultoa_invert+0x86>
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__ultoa_invert+0x5c>
    18d6:	f6 cf       	rjmp	.-20     	; 0x18c4 <__ultoa_invert+0x58>
    18d8:	46 2f       	mov	r20, r22
    18da:	4f 70       	andi	r20, 0x0F	; 15
    18dc:	40 5d       	subi	r20, 0xD0	; 208
    18de:	4a 33       	cpi	r20, 0x3A	; 58
    18e0:	18 f0       	brcs	.+6      	; 0x18e8 <__ultoa_invert+0x7c>
    18e2:	49 5d       	subi	r20, 0xD9	; 217
    18e4:	31 fd       	sbrc	r19, 1
    18e6:	40 52       	subi	r20, 0x20	; 32
    18e8:	41 93       	st	Z+, r20
    18ea:	02 d0       	rcall	.+4      	; 0x18f0 <__ultoa_invert+0x84>
    18ec:	a9 f7       	brne	.-22     	; 0x18d8 <__ultoa_invert+0x6c>
    18ee:	ea cf       	rjmp	.-44     	; 0x18c4 <__ultoa_invert+0x58>
    18f0:	b4 e0       	ldi	r27, 0x04	; 4
    18f2:	a6 95       	lsr	r26
    18f4:	97 95       	ror	r25
    18f6:	87 95       	ror	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	ba 95       	dec	r27
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <__ultoa_invert+0x86>
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	61 05       	cpc	r22, r1
    1904:	71 05       	cpc	r23, r1
    1906:	08 95       	ret
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	0a 2e       	mov	r0, r26
    190e:	06 94       	lsr	r0
    1910:	57 95       	ror	r21
    1912:	47 95       	ror	r20
    1914:	37 95       	ror	r19
    1916:	27 95       	ror	r18
    1918:	ba 95       	dec	r27
    191a:	c9 f7       	brne	.-14     	; 0x190e <__ultoa_invert+0xa2>
    191c:	62 0f       	add	r22, r18
    191e:	73 1f       	adc	r23, r19
    1920:	84 1f       	adc	r24, r20
    1922:	95 1f       	adc	r25, r21
    1924:	a0 1d       	adc	r26, r0
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
